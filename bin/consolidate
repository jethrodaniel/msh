#!/usr/bin/env ruby
# vim: set filetype=ruby:

# Simple tool to generate a single ruby file from a Ruby gem, by resolving
# `require`s, similar to combining c/c++ header files without duplication.
#
# Consolidate files into a single executable via
#
#     $ consolidate lib/msh.rb > exe
#
# To see the dependency graph
#
#     $ ruby bin/consolidate.rb lib/msh.rb >/dev/null
#     => English              (stdlib) English
#       => msh/backports              lib/msh/backports.rb
#       => msh/core_extensions        lib/msh/core_extensions.rb
#           => msh/version            lib/msh/version.rb
#         => msh/optparse             lib/msh/optparse.rb
#           => logger                 (stdlib) logger
#             => msh/errors           lib/msh/errors.rb
#             => msh/ansi             lib/msh/ansi.rb
#
# See https://blogs.grammatech.com/visualizing-include-graphs
#
# == how it works
#
# Pretty simple, really. As long as your gem follows the canonical gem
# file structure and `require` conventions, then this should work
#
# 1. Start at the gem entry point, i.e, `lib/gemname.rb`, see `gem which`
# 2. Parse using whitequark's parser

require "bundler/inline"

gemfile do
  gem "parser", "~> 2.7"
  gem "unparser", "~> 0.4.7"
  gem "pry-byebug"
end

require "parser/current"
require "unparser"

class Require
  STD_LIBS = %w[
    English
    logger
    reline
    e2mmap
    ripper
    fileutils
    jruby
    readline
    io/console
    timeout
    forwardable
    pathname
    tempfile
    fiddle/import
    win32api
  ].freeze
end

# see https://blog.arkency.com/rewriting-deprecated-apis-with-parser-gem/
#
#     insert_after(range, content)
#     insert_before(range, content)
#     remove(range)
#     replace(range, content)
#
class GemConsolidator < Parser::TreeRewriter # < Parser::AST::Processor
  # @todo spec.require_paths = ["lib"]
  #
  def initialize gem_entry
    @gem_entry = gem_entry
    @name      = File.basename(@gem_entry).delete_suffix(".rb")
    @lib_dir   = Pathname.new(File.dirname(@gem_entry))
    @gem_root  = @lib_dir + ".."
    gemspec    = (@gem_root + "#{@name}.gemspec").realpath
    @gem       = Gem::Specification.load(gemspec.to_s)

    @files = @gem.files.filter_map do |f|
      pre = @gem.require_paths.find { |p| f.start_with?(p) }

      if pre
        req = f.delete_prefix("#{pre}/").delete_suffix(".rb")
        path = Pathname.new(@gem_root) + f
        {req => path}
      end
    end.reduce(:merge)

    @parser = Parser::CurrentRuby.new
  end

  def self.run gem_entry
    consolidator = new(gem_entry)
    consolidator.consolidate File.read(gem_entry)
  end

  def consolidate str
    buffer = Parser::Source::Buffer.new("(string)")
    buffer.source = str
    rewrite(buffer, @parser.parse(buffer))
  end

  def stdlib? lib
    Require::STD_LIBS.include? lib
  end

  #     $ ruby-parse -e "require 'ast'"
  #     (send nil :require
  #       (str "ast"))
  #
  def on_send node
    if node.children[1] == :require && node.children[2].type == :str
      lib = node.children[2].children[0]

      return node if stdlib?(lib)


      req_file = @files[node.children.last.children.last]

      buffer = Parser::Source::Buffer.new("(string)")
      buffer.source = File.read(req_file)

      @parser.reset
      req_ast = @parser.parse buffer

      req_contents = Unparser.unparse(req_ast)

      replace node.location.expression, "\n#{req_contents}\n"
      node
    else
      node
    end
  end
end

puts GemConsolidator.run(ARGV[0]) if $PROGRAM_NAME == __FILE__

# #  header = <<~RB
# #    #!/usr/bin/env ruby
# #  RB
# #  footer = <<~RB
# #    Msh.start if $0 == __FILE__
# #  RB

# #  puts <<~RB
# #    #{header}

# #    # Autogenerated single-file version of `#{ARGV[0]}`.
# #    #
# #    # Each file is present below, but
# #    #
# #    # - standard library `require`s are moved to **before** the file. TODO: fix this.
# #    # - `require`s for non-standard library files are absent (obviously)
# #    #
# #    # **Note**: currently, only the following structure is allowed
# #    #
# #    #     lib
# #    #     ├── foo
# #    #     │     ├── version.rb
# #    #     │     └── foo.rb
# #    #     └── foo.rb
# #    #
# #    # Also, the gem entry point (`lib/foo.rb` in the above) must **only**
# #    # contain `require` statements, since it's content (besides it's
# #    # `require`s) won't be in the consolidated file.
# #    #
# #  RB

# # puts Unparser.unparse(ast)
# # Require.new(lib).process(ast)

# # puts footer
# end
