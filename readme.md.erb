# msh

![](https://github.com/jethrodaniel/msh/workflows/ci/badge.svg)
![](https://img.shields.io/github/license/jethrodaniel/msh.svg)
<%# [![docs](https://img.shields.io/badge/docs-1f425f.svg)](https://jethrodaniel.com/msh) %>
![](https://img.shields.io/github/stars/jethrodaniel/msh?style=social)

msh is a ruby shell.

Its goal is the same as that of Ruby

> Ruby is designed to make programmers happy.
>
> Yukihiro 'Matz' Matsumoto


**NOTE**: still in early stages, subject to breaking changes until `v1.0.0`.

## supported rubies

- [x] CRuby >= 2.5
- [ ] JRuby

## dependencies

### runtime

- [readline](https://github.com/ruby/readline-ext/) (C, comes with CRuby)

### build

- [asciidoctor](https://github.com/asciidoctor/asciidoctor) to build the manpages

## installation

Assuming you have Ruby installed:

```
$ gem install msh
$ msh -h
<%= `msh -h` %>
```

## roadmap

- [ ] version 1.0.0 will be when I can use msh as my daily driver
- [ ] version 2.0.0 may be a mruby port, in order to package as a static executable (maybe)

## development

see the rakefile

```sh
$ bundle exec rake -T
<%= `bundle exec rake -T` %>
```

Run `./bin/console` to load up msh in a REPL.

### testing

msh has more tests than you can shake a stick at.

Most of these come from a [single YAML file](./spec/fixtures/examples.yml)...

```yml
<%= `sed -n '5,22p' spec/fixtures/examples.yml` %>
...
```

and are `eval`'d during the specs.

```sh
$ bundle exec rake spec
```

You can also check out [the CI](https://github.com/jethrodaniel/msh/actions/) to see the specs' last executions ðŸ”ª.

## contributing

Bug reports and pull requests are welcome on [GitHub](https://github.com/jethrodaniel/msh).

```sh
git clone https://github.com/jethrodaniel/msh
cd msh && bundle exec rake
```

## license

```sh
<%= `msh --copyright` %>
```

## references

- [POSIX specifications](https://pubs.opengroup.org/onlinepubs/9699919799/)
- [shell intro (1978)](https://web.archive.org/web/20170207130846/http://porkmail.org/era/unix/shell.html)
- [bashish BNF](https://github.com/jalanb/jab/blob/master/src/bash/bash.bnf)

## thanks

We stand on the shoulders of giants, to whom we are grateful.

- https://craftinginterpreters.com/
- Crystal lang's source code for real-world examples of lexer/parser/interperter/compiler design
