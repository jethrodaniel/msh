#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'ast'
require "msh/lexer"

module Msh
  class Parser < Racc::Parser

module_eval(<<'...end parse.y/module_eval...', 'parse.y', 140)

  include AST::Sexp

  attr_reader :lexer

  def initialize
    @lexer = Msh::Lexer.new

    # Use with conjunction with racc's `--debug` option
    @yydebug = true
  end

  def parse(code)
    @lexer.scan_setup code
    do_parse
  rescue Racc::ParseError => e
    # TODO: better error message
    raise e.class.new "[#{line}][#{column}]: #{e.message.gsub "\n", ''}"
  end

  def next_token
    @lexer.next_token
  end

  def line
    @lexer.line
  end

  def column
    @lexer.column
  end

  private

  # `a |& b` is semantic sugar for `a 2>&1 | a`.
  #
  # @param left [AST::Node]
  # @param right [AST::Node]
  def expand_PIPE_AND left:, right:
    case left.type
    when :COMMAND
      if left.children.last.type == :REDIRECTIONS
        redirections = left.children.last.children
        redirections = s(:REDIRECTIONS, *(redirections + [s(:N_DUP_OUT, 2, 1)]))
        left = s(left.type, *(left.children[0...-1] + [redirections]))
      else
        left = s(left.type, *(left.children + [s(:REDIRECTIONS, s(:N_DUP_OUT, 2, 1))]))
      end

      case right.type
      when :PIPELINE
        s(:PIPELINE, left, *right.children)
      when :COMMAND
        s(:PIPELINE, left, right)
      else
        abort "expected :COMMAND or :PIPELINE, got `#{left.type}`"
      end
    when :PIPELINE
      abort "todo"
    else
      abort "expected :COMMAND or :PIPELINE, got `#{left.type}`"
    end
  end

...end parse.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    10,    32,    21,    22,    11,    14,    18,   -16,    19,
    18,    20,    19,    -9,    20,    85,    10,   -18,    22,    22,
    11,    14,   -15,    27,    28,    18,    29,    19,    84,    20,
    11,    14,    34,    11,    14,    18,    35,    19,    18,    20,
    19,    54,    20,    11,    14,    34,    11,    14,    18,    34,
    19,    18,    20,    19,    22,    20,    37,    39,    40,    41,
    42,    43,    44,    45,    39,    40,    41,    42,    43,    44,
    45,    39,    40,    41,    42,    43,    44,    45,    39,    40,
    41,    42,    43,    44,    45,    68,    69,    70,    71,    72,
    77,    73,    27,    28,    34,    75,    76,    39,    40,    41,
    42,    43,    44,    45,    39,    40,    41,    42,    43,    44,
    45,   -35,   -35,    88,    75,    76,    27,    28,    75,    76,
    18,    18,    19,    19,    20,    20,    18,    18,    19,    19,
    20,    20,    18,    34,    19,    34,    20,    10,   -17,    24,
    25,    75,    76,    75,    76,    75,    76,    83,    82,    24,
    25,    24,    25,    24,    25,    27,    28,    27,    28,    27,
    28,    75,    76,    75,    76,    75,    76,    75,    76,    75,
    76,    75,    76,    75,    76,    75,    76,    75,    76,    34 ]

racc_action_check = [
     0,     0,    12,     1,    53,     0,     0,    12,     3,    12,
     0,    12,     0,     7,     0,    53,     7,     7,     4,    48,
    18,    18,     5,     7,     7,    18,     9,    18,    48,    18,
    19,    19,    13,    22,    22,    19,    14,    19,    22,    19,
    22,    21,    22,    24,    24,    30,    25,    25,    24,    33,
    24,    25,    24,    25,    55,    25,    15,    15,    15,    15,
    15,    15,    15,    15,    16,    16,    16,    16,    16,    16,
    16,    17,    17,    17,    17,    17,    17,    17,    36,    36,
    36,    36,    36,    36,    36,    39,    39,    39,    39,    39,
    41,    39,    31,    31,    61,    41,    41,    46,    46,    46,
    46,    46,    46,    46,    47,    47,    47,    47,    47,    47,
    47,    52,    52,    69,    40,    40,    52,    52,    69,    69,
    11,    27,    11,    27,    11,    27,    28,    32,    28,    32,
    28,    32,    34,    63,    34,    64,    34,     6,     6,     6,
     6,    42,    42,    43,    43,    44,    44,    45,    45,    51,
    51,    56,    56,    58,    58,    60,    60,    62,    62,    65,
    65,    68,    68,    70,    70,    71,    71,    72,    72,    73,
    73,    77,    77,    82,    82,    83,    83,    88,    88,    66 ]

racc_action_pointer = [
    -2,     3,   nil,     4,    14,    18,   134,    13,   nil,    23,
   nil,   108,    -5,    21,    27,    40,    47,    54,    13,    23,
   nil,    41,    26,   nil,    36,    39,   nil,   109,   114,   nil,
    34,    82,   115,    38,   120,   nil,    61,   nil,   nil,    67,
    98,    79,   125,   127,   129,   129,    80,    87,    15,   nil,
   nil,   144,   106,     0,   nil,    50,   146,   nil,   148,   nil,
   145,    83,   147,   122,   124,   149,   168,   nil,   145,   102,
   147,   149,   151,   153,   nil,   nil,   nil,   155,   nil,   nil,
   nil,   nil,   157,   159,   nil,   nil,   nil,   nil,   161,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -9,   -65,    -1,    -2,    -3,    -4,    -5,   -35,    -8,   -10,
   -11,   -65,   -65,   -26,   -27,   -36,   -38,   -40,   -65,   -65,
   -45,   -65,   -14,    -6,   -65,   -65,    -7,   -65,   -65,   -12,
   -23,   -35,   -65,   -25,   -65,   -28,   -37,   -44,   -47,   -65,
   -65,   -65,   -65,   -65,   -65,   -65,   -39,   -41,   -65,   -15,
   -16,   -17,   -18,   -65,    97,   -13,   -21,   -19,   -22,   -20,
   -30,   -29,   -34,   -33,   -24,   -32,   -31,   -46,   -65,   -65,
   -65,   -65,   -65,   -65,   -49,   -63,   -64,   -65,   -54,   -55,
   -58,   -59,   -65,   -65,   -42,   -43,   -48,   -50,   -65,   -53,
   -56,   -57,   -62,   -52,   -60,   -61,   -51 ]

racc_goto_table = [
    74,    78,    79,    80,    81,     4,     8,     1,    67,    36,
    46,    47,    23,    26,     5,   nil,     3,     7,    67,    67,
   nil,   nil,     6,    48,    53,   nil,   nil,    55,    86,    87,
    89,    90,    91,    92,   nil,    52,    52,    93,   nil,    52,
    57,    59,    94,    95,    60,    62,    56,    58,    96,    30,
    33,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    61,    63,   nil,   nil,   nil,
    64,   nil,    66 ]

racc_goto_check = [
    16,    16,    16,    16,    16,     3,     6,     1,    15,    12,
    12,    12,     6,     6,     4,   nil,     2,     7,    15,    15,
   nil,   nil,     5,     3,     3,   nil,   nil,     3,    16,    16,
    16,    16,    16,    16,   nil,     7,     7,    16,   nil,     7,
     2,     2,    16,    16,     7,     7,     5,     5,    16,     9,
     9,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,     9,   nil,   nil,   nil,
     9,   nil,     9 ]

racc_goto_pointer = [
   nil,     7,    16,     5,    14,    22,     6,    17,   nil,    38,
   nil,   nil,    -6,   nil,   nil,   -28,   -40 ]

racc_goto_default = [
   nil,   nil,    50,   nil,    49,    51,   nil,    31,     9,    13,
    12,    15,   nil,    16,    17,    38,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 26, :_reduce_1,
  1, 26, :_reduce_2,
  1, 26, :_reduce_3,
  1, 26, :_reduce_4,
  1, 26, :_reduce_5,
  2, 26, :_reduce_6,
  2, 26, :_reduce_7,
  1, 26, :_reduce_8,
  0, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 33, :_reduce_none,
  2, 33, :_reduce_none,
  3, 28, :_reduce_13,
  2, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  3, 27, :_reduce_19,
  3, 27, :_reduce_20,
  3, 27, :_reduce_21,
  3, 27, :_reduce_22,
  2, 30, :_reduce_23,
  3, 30, :_reduce_24,
  2, 30, :_reduce_25,
  1, 30, :_reduce_none,
  1, 35, :_reduce_27,
  2, 35, :_reduce_28,
  3, 34, :_reduce_29,
  3, 34, :_reduce_30,
  3, 34, :_reduce_31,
  3, 34, :_reduce_32,
  3, 34, :_reduce_33,
  3, 34, :_reduce_34,
  1, 34, :_reduce_none,
  1, 32, :_reduce_none,
  2, 32, :_reduce_37,
  1, 32, :_reduce_none,
  2, 32, :_reduce_39,
  1, 32, :_reduce_none,
  2, 32, :_reduce_41,
  3, 38, :_reduce_42,
  3, 39, :_reduce_43,
  2, 36, :_reduce_44,
  1, 36, :_reduce_45,
  2, 37, :_reduce_46,
  1, 37, :_reduce_47,
  3, 40, :_reduce_48,
  2, 40, :_reduce_49,
  3, 40, :_reduce_50,
  4, 40, :_reduce_51,
  3, 40, :_reduce_52,
  3, 40, :_reduce_53,
  2, 40, :_reduce_54,
  2, 40, :_reduce_55,
  3, 40, :_reduce_56,
  3, 40, :_reduce_57,
  2, 40, :_reduce_58,
  2, 40, :_reduce_59,
  3, 40, :_reduce_60,
  3, 40, :_reduce_61,
  3, 40, :_reduce_62,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none ]

racc_reduce_n = 65

racc_shift_n = 97

racc_token_table = {
  false => 0,
  :error => 1,
  :expr => 2,
  :NEWLINE => 3,
  :SEMI => 4,
  :OR => 5,
  :AND_AND => 6,
  :BANG => 7,
  :TIME => 8,
  :TIME_OPT => 9,
  :PIPE_AND => 10,
  :PIPE => 11,
  :LEFT_BRACE => 12,
  :RIGHT_BRACE => 13,
  :LEFT_PAREN => 14,
  :RIGHT_PAREN => 15,
  :WORD => 16,
  :DIGIT => 17,
  :D_REDIRECT_RIGHT => 18,
  :REDIRECT_RIGHT => 19,
  :REDIRECT_LEFT => 20,
  :DUP_IN => 21,
  :DUP_OUT => 22,
  :AND => 23,
  :DIAMOND => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "expr",
  "NEWLINE",
  "SEMI",
  "OR",
  "AND_AND",
  "BANG",
  "TIME",
  "TIME_OPT",
  "PIPE_AND",
  "PIPE",
  "LEFT_BRACE",
  "RIGHT_BRACE",
  "LEFT_PAREN",
  "RIGHT_PAREN",
  "WORD",
  "DIGIT",
  "D_REDIRECT_RIGHT",
  "REDIRECT_RIGHT",
  "REDIRECT_LEFT",
  "DUP_IN",
  "DUP_OUT",
  "AND",
  "DIAMOND",
  "$start",
  "code",
  "and_or",
  "list",
  "simple_list",
  "pipeline_cmd",
  "sep",
  "command",
  "newlines",
  "pipeline",
  "time_cmd",
  "simple_command",
  "redirections",
  "group",
  "subshell",
  "redirection",
  "io_word" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parse.y', 11)
  def _reduce_1(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 12)
  def _reduce_2(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 13)
  def _reduce_3(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 14)
  def _reduce_4(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 15)
  def _reduce_5(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 16)
  def _reduce_6(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 17)
  def _reduce_7(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 18)
  def _reduce_8(val, _values, result)
     result = s(:NOOP)
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parse.y', 36)
  def _reduce_13(val, _values, result)
                           left  = val[0].type == :LIST ? val[0].children : [val[0]]
                       right = val[2].type == :LIST ? val[2].children : [val[2]]
                       result = s(:LIST, *left, *right)

    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parse.y', 49)
  def _reduce_19(val, _values, result)
     result = s(:OR,  val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 50)
  def _reduce_20(val, _values, result)
     result = s(:AND, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 51)
  def _reduce_21(val, _values, result)
     result = s(:OR,  val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 52)
  def _reduce_22(val, _values, result)
     result = s(:AND, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 55)
  def _reduce_23(val, _values, result)
     result = s(:NEG_PIPELINE, *val[1].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 56)
  def _reduce_24(val, _values, result)
     result = s(:NEG_PIPELINE, *([val[0]] + val[2].children))
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 57)
  def _reduce_25(val, _values, result)
     result = s(:PIPELINE, *([val[0]] + val[1].children))
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parse.y', 61)
  def _reduce_27(val, _values, result)
     result = s(:TIME)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 62)
  def _reduce_28(val, _values, result)
     result = s(:TIME_P)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 68)
  def _reduce_29(val, _values, result)
     result = expand_PIPE_AND :left => val[0], :right => val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 69)
  def _reduce_30(val, _values, result)
     result = expand_PIPE_AND :left => val[0], :right => val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 70)
  def _reduce_31(val, _values, result)
     result = s(:PIPELINE, *val[0].children, *val[2].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 71)
  def _reduce_32(val, _values, result)
     result = s(:PIPELINE, *val[0].children, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 72)
  def _reduce_33(val, _values, result)
     result = s(:PIPELINE, val[0], *val[2].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 73)
  def _reduce_34(val, _values, result)
     result = s(:PIPELINE, val[0], val[2])
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parse.y', 78)
  def _reduce_37(val, _values, result)
     result = s(:COMMAND, *val[0].children, val[1])
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parse.y', 80)
  def _reduce_39(val, _values, result)
     result = s(:GROUP, *val[0].children, val[1])
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parse.y', 82)
  def _reduce_41(val, _values, result)
     result = s(:SUBSHELL, *val[0].children, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 86)
  def _reduce_42(val, _values, result)
                                        result = val[1].type == :GROUP \
                                      ? val[1]
                                      : s(:GROUP,  val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 93)
  def _reduce_43(val, _values, result)
                                        result = val[1].type == :SUBSHELL \
                                      ? val[1]
                                      : s(:SUBSHELL,  val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 100)
  def _reduce_44(val, _values, result)
                                        result = s(:COMMAND,
                                               *(val.first.children + [s(:WORD, val.last)]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 103)
  def _reduce_45(val, _values, result)
     result = s(:COMMAND, s(:WORD, val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 106)
  def _reduce_46(val, _values, result)
     result = s(:REDIRECTIONS, *val[0].children, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 107)
  def _reduce_47(val, _values, result)
     result = s(:REDIRECTIONS, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 111)
  def _reduce_48(val, _values, result)
     result = s(:N_D_REDIRECT_OUT, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 112)
  def _reduce_49(val, _values, result)
     result = s(:D_REDIRECT_OUT, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 113)
  def _reduce_50(val, _values, result)
     result = s(:N_REDIRECT_OUT, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 114)
  def _reduce_51(val, _values, result)
     result = s(:N_REDIRECT_OUT_CLOBBER, val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 115)
  def _reduce_52(val, _values, result)
     result = s(:REDIRECT_OUT_CLOBBER, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 116)
  def _reduce_53(val, _values, result)
     result = s(:N_REDIRECT_IN, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 117)
  def _reduce_54(val, _values, result)
     result = s(:REDIRECT_OUT, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 118)
  def _reduce_55(val, _values, result)
     result = s(:REDIRECT_IN, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 120)
  def _reduce_56(val, _values, result)
     result = s(:N_DUP_IN, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 121)
  def _reduce_57(val, _values, result)
     result = s(:N_DUP_OUT, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 122)
  def _reduce_58(val, _values, result)
     result = s(:DUP_IN, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 123)
  def _reduce_59(val, _values, result)
     result = s(:DUP_OUT, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 124)
  def _reduce_60(val, _values, result)
     result = s(:AND_REDIRECT_OUT, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 125)
  def _reduce_61(val, _values, result)
     result = s(:AND_D_REDIRECT_OUT, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 126)
  def _reduce_62(val, _values, result)
     result = s(:DIAMOND, val[0], val[2])
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Msh


class Msh::Parser
  def self.interactive
    while line = Readline.readline("parser> ", true)&.chomp
      case line
      when "q", "quit", "exit"
        puts "goodbye! <3"
        exit
      else
        begin
          parser = Msh::Parser.new
          p parser.parse(line)
        rescue Racc::ParseError => e
          # TODO: better error message
          puts "[#{parser.line}][#{parser.column}]: #{e.message.gsub "\n", ''}"
        end
      end
    end
  end

  # Run the parser on a file
  def self.parse_file filename
    parser = Msh::Parser.new
    p parser.parse(File.read(filename))
  rescue ParseError
    abort $ERROR_INFO
  end

  # Parse each file passed as input (if any), or run interactively
  def self.start args = ARGV
    if args.size.positive?
      args.each do |file|
        abort "#{file} is not a file!" unless File.file?(file)
        parser = Msh::Parser.new
        p parser.parse(File.read(file))
      end
    else
      Msh::Parser.interactive
    end
  end
end
