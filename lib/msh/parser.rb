#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'ast'
require "msh/lexer"

module Msh
  class Parser < Racc::Parser

module_eval(<<'...end parse.y/module_eval...', 'parse.y', 229)

  include ::AST::Sexp

  attr_reader :lexer

  def initialize
    @lexer = Msh::Lexer.new
  end

  def parse(code)
    @lexer.scan_setup code
    do_parse
  rescue Racc::ParseError => e
    # TODO: better error message
    raise Racc::ParseError, "[#{line}][#{column}]: #{e.message.gsub "\n", ''}"
  end

  def next_token
    @lexer.next_token
  end

  def line
    @lexer.line
  end

  def column
    @lexer.column
  end

  private

  # `a |& b` is semantic sugar for `a 2>&1 | a`.
  #
  # @param left [AST::Node]
  # @param right [AST::Node]
  def expand_PIPE_AND left:, right:
    case left.type
    when :COMMAND
      if left.children.last.type == :REDIRECTIONS
        redirections = left.children.last.children
        redirections = s(:REDIRECTIONS, *(redirections + [s(:DUP, 2, 1)]))
        left = s(left.type, *(left.children[0...-1] + [redirections]))
      else
        left = s(left.type, *(left.children + [s(:REDIRECTIONS, s(:DUP, 2, 1))]))
      end

      case right.type
      when :PIPELINE
        s(:PIPELINE, left, *right.children)
      when :COMMAND
        s(:PIPELINE, left, right)
      else
        abort "expected :COMMAND or :PIPELINE, got `#{left.type}`"
      end
    when :PIPELINE
      abort "todo"
    else
      abort "expected :COMMAND or :PIPELINE, got `#{left.type}`"
    end
  end

...end parse.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    28,     4,    11,    28,    11,   -19,    12,    15,    45,
    84,    36,    19,    41,    20,    85,    21,    44,    47,    48,
    49,    50,    51,    52,    53,    54,     4,    11,    42,     4,
    63,    12,    15,    41,    12,    15,    19,    39,    20,    19,
    21,    20,    19,    21,    20,    41,    21,    12,    15,    77,
    12,    15,    19,    78,    20,    19,    21,    20,    79,    21,
    12,    15,    80,    12,    15,    19,    81,    20,    19,    21,
    20,    82,    21,    12,    15,    19,    83,    20,    19,    21,
    20,    28,    21,    11,   -21,   -38,   -38,    11,    28,    41,
    34,    35,    47,    48,    49,    50,    51,    52,    53,    54,
    47,    48,    49,    50,    51,    52,    53,    54,    47,    48,
    49,    50,    51,    52,    53,    54,    47,    48,    49,    50,
    51,    52,    53,    54,    47,    48,    49,    50,    51,    52,
    53,    54,   -38,   -38,    11,   -18,    41,    34,    35,    19,
    19,    20,    20,    21,    21,    19,    19,    20,    20,    21,
    21,    11,   -20,    31,    32,    34,    35,    31,    32,    31,
    32,    31,    32,    34,    35,    34,    35,    34,    35,    41,
    41 ]

racc_action_check = [
     1,    57,     1,     4,    62,     5,     5,     1,     1,    16,
    57,    10,     1,    14,     1,    62,     1,    16,    16,    16,
    16,    16,    16,    16,    16,    16,     0,     0,    15,     2,
    22,     0,     0,    37,     2,     2,     0,    13,     0,     2,
     0,     2,    13,     2,    13,    40,    13,    19,    19,    48,
    20,    20,    19,    49,    19,    20,    19,    20,    50,    20,
    28,    28,    51,    31,    31,    28,    52,    28,    31,    28,
    31,    53,    31,    32,    32,    12,    54,    12,    32,    12,
    32,    64,    32,     9,     9,     9,     9,     6,     6,    70,
     9,     9,    17,    17,    17,    17,    17,    17,    17,    17,
    18,    18,    18,    18,    18,    18,    18,    18,    43,    43,
    43,    43,    43,    43,    43,    43,    55,    55,    55,    55,
    55,    55,    55,    55,    56,    56,    56,    56,    56,    56,
    56,    56,    61,    61,     7,     7,    72,    61,    61,    34,
    35,    34,    35,    34,    35,    39,    41,    39,    41,    39,
    41,     8,     8,     8,     8,    38,    38,    60,    60,    65,
    65,    67,    67,    69,    69,    71,    71,    74,    74,    73,
    75 ]

racc_action_pointer = [
    24,     0,    27,   nil,     0,     2,    84,   131,   148,    80,
     8,   nil,    63,    30,     2,    19,     1,    75,    83,    40,
    43,   nil,    30,   nil,   nil,   nil,   nil,   nil,    53,   nil,
   nil,    56,    66,   nil,   127,   128,   nil,    22,   145,   133,
    34,   134,   nil,    91,   nil,   nil,   nil,   nil,    33,    37,
    42,    46,    50,    55,    60,    99,   107,    -3,   nil,   nil,
   152,   127,     0,   nil,    77,   154,   nil,   156,   nil,   153,
    78,   155,   125,   158,   157,   159,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -13,   -60,    -1,    -4,   -13,   -13,   -13,   -13,   -13,   -13,
   -12,   -14,   -60,   -60,   -29,   -30,   -39,   -41,   -43,   -60,
   -60,   -49,   -60,    -3,    -2,    -5,    -6,    -7,   -17,    -8,
    -9,   -60,   -60,   -11,   -60,   -60,   -15,   -26,   -38,   -60,
   -28,   -60,   -31,   -40,   -47,   -48,   -51,   -52,   -60,   -60,
   -60,   -60,   -60,   -60,   -60,   -42,   -44,   -60,   -18,   -19,
   -20,   -21,   -60,    86,   -16,   -24,   -22,   -25,   -23,   -33,
   -32,   -37,   -36,   -27,   -35,   -34,   -50,   -53,   -54,   -55,
   -56,   -57,   -58,   -59,   -45,   -46 ]

racc_goto_table = [
     9,     9,     9,    37,    40,    59,    59,    57,    62,    76,
     2,    23,    24,     1,    59,   nil,    64,    66,    68,    61,
    61,    76,    76,   nil,   nil,    70,    72,   nil,    61,   nil,
    73,   nil,    75,   nil,    69,    71,    60,    60,    58,    58,
   nil,    74,    43,    55,    56,    60,     3,    58,    65,    67,
    25,    26,    27,    29,    30,    33 ]

racc_goto_check = [
     8,     8,     8,    10,    10,     4,     4,     5,     5,    16,
     2,     2,     2,     1,     4,   nil,     5,     4,     4,     8,
     8,    16,    16,   nil,   nil,    10,    10,   nil,     8,   nil,
    10,   nil,    10,   nil,     8,     8,     7,     7,     6,     6,
   nil,     8,    13,    13,    13,     7,     3,     6,     7,     7,
     3,     3,     3,     3,     3,     3 ]

racc_goto_pointer = [
   nil,    13,    10,    46,   -14,   -12,    19,    17,     0,   nil,
    -9,   nil,   nil,    26,   nil,   nil,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,     7,     8,    38,    10,
    14,    13,    16,   nil,    17,    18,    46 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 26, :_reduce_none,
  2, 26, :_reduce_2,
  2, 26, :_reduce_3,
  1, 26, :_reduce_4,
  2, 27, :_reduce_5,
  2, 27, :_reduce_6,
  2, 27, :_reduce_7,
  2, 27, :_reduce_8,
  2, 27, :_reduce_9,
  2, 27, :_reduce_10,
  2, 27, :_reduce_11,
  1, 28, :_reduce_none,
  0, 28, :_reduce_none,
  1, 34, :_reduce_none,
  2, 34, :_reduce_none,
  3, 30, :_reduce_16,
  2, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  3, 29, :_reduce_22,
  3, 29, :_reduce_23,
  3, 29, :_reduce_24,
  3, 29, :_reduce_25,
  2, 32, :_reduce_26,
  3, 32, :_reduce_27,
  2, 32, :_reduce_28,
  1, 32, :_reduce_none,
  1, 36, :_reduce_30,
  2, 36, :_reduce_31,
  3, 35, :_reduce_32,
  3, 35, :_reduce_33,
  3, 35, :_reduce_34,
  3, 35, :_reduce_35,
  3, 35, :_reduce_36,
  3, 35, :_reduce_37,
  1, 35, :_reduce_none,
  1, 33, :_reduce_none,
  2, 33, :_reduce_40,
  1, 33, :_reduce_none,
  2, 33, :_reduce_42,
  1, 33, :_reduce_none,
  2, 33, :_reduce_44,
  3, 39, :_reduce_45,
  3, 40, :_reduce_46,
  2, 37, :_reduce_47,
  2, 37, :_reduce_48,
  1, 37, :_reduce_49,
  2, 38, :_reduce_50,
  1, 38, :_reduce_51,
  1, 41, :_reduce_52,
  2, 41, :_reduce_53,
  2, 41, :_reduce_54,
  2, 41, :_reduce_55,
  2, 41, :_reduce_56,
  2, 41, :_reduce_57,
  2, 41, :_reduce_58,
  2, 41, :_reduce_59 ]

racc_reduce_n = 60

racc_shift_n = 86

racc_token_table = {
  false => 0,
  :error => 1,
  :expr => 2,
  :NEWLINE => 3,
  :SEMI => 4,
  :OR => 5,
  :AND_AND => 6,
  :BANG => 7,
  :TIME => 8,
  :TIME_OPT => 9,
  :PIPE_AND => 10,
  :PIPE => 11,
  :LEFT_BRACE => 12,
  :RIGHT_BRACE => 13,
  :LEFT_PAREN => 14,
  :RIGHT_PAREN => 15,
  :WORD => 16,
  :MOVE_FD => 17,
  :OPEN_RW => 18,
  :DUP => 19,
  :APPEND => 20,
  :APPEND_BOTH => 21,
  :REDIRECT_BOTH => 22,
  :REDIRECT => 23,
  :REDIRECT_NOCLOBBER => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "expr",
  "NEWLINE",
  "SEMI",
  "OR",
  "AND_AND",
  "BANG",
  "TIME",
  "TIME_OPT",
  "PIPE_AND",
  "PIPE",
  "LEFT_BRACE",
  "RIGHT_BRACE",
  "LEFT_PAREN",
  "RIGHT_PAREN",
  "WORD",
  "MOVE_FD",
  "OPEN_RW",
  "DUP",
  "APPEND",
  "APPEND_BOTH",
  "REDIRECT_BOTH",
  "REDIRECT",
  "REDIRECT_NOCLOBBER",
  "$start",
  "init",
  "code",
  "sep",
  "and_or",
  "list",
  "simple_list",
  "pipeline_cmd",
  "command",
  "newlines",
  "pipeline",
  "time_cmd",
  "simple_command",
  "redirections",
  "group",
  "subshell",
  "redirection" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parse.y', 12)
  def _reduce_2(val, _values, result)
     result = s(:EXPR, *val[0].children, *val[1].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 13)
  def _reduce_3(val, _values, result)
     result = s(:EXPR, *val[0].children, *val[1].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 14)
  def _reduce_4(val, _values, result)
     result = s(:NOOP)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 17)
  def _reduce_5(val, _values, result)
     result = s(:EXPR, val[-1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 18)
  def _reduce_6(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 19)
  def _reduce_7(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 20)
  def _reduce_8(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 21)
  def _reduce_9(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 22)
  def _reduce_10(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 23)
  def _reduce_11(val, _values, result)
     result = s(:EXPR, val[0])
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parse.y', 41)
  def _reduce_16(val, _values, result)
                           left  = val[0].type == :LIST ? val[0].children : [val[0]]
                       right = val[2].type == :LIST ? val[2].children : [val[2]]
                       result = s(:LIST, *left, *right)

    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'parse.y', 54)
  def _reduce_22(val, _values, result)
     result = s(:OR,  val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 55)
  def _reduce_23(val, _values, result)
     result = s(:AND, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 56)
  def _reduce_24(val, _values, result)
     result = s(:OR,  val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 57)
  def _reduce_25(val, _values, result)
     result = s(:AND, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 60)
  def _reduce_26(val, _values, result)
     result = s(:NEG_PIPELINE, *val[1].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 61)
  def _reduce_27(val, _values, result)
     result = s(:NEG_PIPELINE, *([val[0]] + val[2].children))
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 62)
  def _reduce_28(val, _values, result)
     result = s(:PIPELINE, *([val[0]] + val[1].children))
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parse.y', 66)
  def _reduce_30(val, _values, result)
     result = s(:TIME)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 67)
  def _reduce_31(val, _values, result)
     result = s(:TIME_P)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 73)
  def _reduce_32(val, _values, result)
     result = expand_PIPE_AND :left => val[0], :right => val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 74)
  def _reduce_33(val, _values, result)
     result = expand_PIPE_AND :left => val[0], :right => val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 75)
  def _reduce_34(val, _values, result)
     result = s(:PIPELINE, *val[0].children, *val[2].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 76)
  def _reduce_35(val, _values, result)
     result = s(:PIPELINE, *val[0].children, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 77)
  def _reduce_36(val, _values, result)
     result = s(:PIPELINE, val[0], *val[2].children)
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 78)
  def _reduce_37(val, _values, result)
     result = s(:PIPELINE, val[0], val[2])
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'parse.y', 83)
  def _reduce_40(val, _values, result)
     result = s(:COMMAND, *val[0].children, val[1])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parse.y', 85)
  def _reduce_42(val, _values, result)
     result = s(:GROUP, *val[0].children, val[1])
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'parse.y', 87)
  def _reduce_44(val, _values, result)
     result = s(:SUBSHELL, *val[0].children, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 91)
  def _reduce_45(val, _values, result)
                                        result = val[1].type == :GROUP \
                                      ? val[1]
                                      : s(:GROUP,  val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 98)
  def _reduce_46(val, _values, result)
                                        result = val[1].type == :SUBSHELL \
                                      ? val[1]
                                      : s(:SUBSHELL,  val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 105)
  def _reduce_47(val, _values, result)
                                        result = s(:COMMAND,
                                               *(val.first.children + [s(:WORD, val.last)]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 109)
  def _reduce_48(val, _values, result)
                                        result = s(:COMMAND,
                                               *(val.first.children + [s(:WORD, val.last)]))

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 112)
  def _reduce_49(val, _values, result)
     result = s(:COMMAND, s(:WORD, val[0]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 115)
  def _reduce_50(val, _values, result)
     result = s(:REDIRECTIONS, *val[0].children, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 116)
  def _reduce_51(val, _values, result)
     result = s(:REDIRECTIONS, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 126)
  def _reduce_52(val, _values, result)
                        unless match = val[0].match(/(\d+)[<>]&(\d+)\-/)
                      abort "expected `[n]<&digit-`, but got `#{val[0]}`"
                    end

                    n, digit = match.captures.map(&:to_i)
                    result = s(:MOVE_FD, n, digit)

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 139)
  def _reduce_53(val, _values, result)
                         unless match = val[0].match(/(\d+)<>/)
                       abort "expected `[n]<>word`, but got `#{val[0]}`"
                     end

                     n = match.captures.first.to_i
                     result = s(:OPEN_RW, n, val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 155)
  def _reduce_54(val, _values, result)
                         unless match = val[0].match(/(\d+)[<>]&/)
                       abort "expected `[n]<&word` or `[n]>&word`, but got `#{val[0]}`"
                     end

                     n = match.captures.first.to_i
                     word = val[1]
                     unless word == "-" || word.match?(/\d+/)
                       abort "[n][<>]&word, expected `-` or a digit"
                     end

                     word = word.to_i if word.match?(/\d+/)

                     result = s(:DUP, n, word)

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 175)
  def _reduce_55(val, _values, result)
                         unless match = val[0].match(/(\d+)[>>]/)
                       abort "expected `[n]>>word`, but got `#{val[0]}`"
                     end

                     n = match.captures.first.to_i
                     result = s(:APPEND, n, val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 187)
  def _reduce_56(val, _values, result)
                              result = s(:APPEND_BOTH, val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 194)
  def _reduce_57(val, _values, result)
                                result = s(:REDIRECT_BOTH, val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 204)
  def _reduce_58(val, _values, result)
                          unless match = val[0].match(/(\d+)[<>]/)
                        abort "expected `[n]<word`, but got `#{val[0]}`"
                      end

                      n = match.captures.first.to_i
                      result = s(:REDIRECT, n, val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 212)
  def _reduce_59(val, _values, result)
                                    unless match = val[0].match(/(\d+)[<>]/)
                                  abort "expected `[n]>[|]word`, but got `#{val[0]}`"
                                end

                                n = match.captures.first.to_i
                                result = s(:REDIRECT_NOCLOBBER, n, val[1])

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Msh


module Msh
  class Parser
    def self.interactive
      while line = Readline.readline("parser> ", true)&.chomp
        case line
        when "q", "quit", "exit"
          puts "goodbye! <3"
          exit
        else
          begin
            parser = Msh::Parser.new
            p parser.parse(line)
          rescue Racc::ParseError => e
            # TODO: better error message
            puts "[#{parser.line}][#{parser.column}]: #{e.message.gsub "\n", ''}"
          end
        end
      end
    end

    # Parse each file passed as input (if any), or run interactively
    def self.start args = ARGV
      return Msh::Parser.interactive if args.size.zero?

      args.each do |file|
        abort "#{file} is not a file!" unless File.file?(file)
        parser = Msh::Parser.new
        p parser.parse(File.read(file))
      end
    end
  end
end
