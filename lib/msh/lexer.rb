#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.7
# from lexical definition file "lib/msh/parse.l".
#++

require 'racc/parser'
# vim: set ft=ruby:

class Msh::Lexer < Racc::Parser
      require 'strscan'

      class ScanError < StandardError ; end

      attr_reader   :lineno
      attr_reader   :filename
      attr_accessor :state

      def scan_setup(str)
        @ss = StringScanner.new(str)
        @lineno =  1
        @state  = nil
      end

      def action
        yield
      end

      def scan_str(str)
        scan_setup(str)
        do_parse
      end
      alias :scan :scan_str

      def load_file( filename )
        @filename = filename
        File.open(filename, "r") do |f|
          scan_setup(f.read)
        end
      end

      def scan_file( filename )
        load_file(filename)
        do_parse
      end


        def next_token
          return if @ss.eos?

          # skips empty actions
          until token = _next_token or @ss.eos?; end
          token
        end

        def _next_token
          text = @ss.peek(1)
          @lineno  +=  1  if text == "\n"
          token = case @state
            when nil
          case
                  when (text = @ss.scan(/\#[^\n]*[\n]*/))
                    ;

                  when (text = @ss.scan(/[\n]+/))
                     action {
                                    @line += 1
                                    @column = 1
                                    [:NEWLINE, text]
                                  }


                  when (text = @ss.scan(/time/))
                     action { [:TIME, text] }

                  when (text = @ss.scan(/;/))
                     action { [:SEMI, text] }

                  when (text = @ss.scan(/\-p/))
                     action { [:TIME_OPT, text] }

                  when (text = @ss.scan(/\{/))
                     action { [:LEFT_BRACE, text] }

                  when (text = @ss.scan(/\}/))
                     action { [:RIGHT_BRACE, text] }

                  when (text = @ss.scan(/\(/))
                     action { [:LEFT_PAREN, text] }

                  when (text = @ss.scan(/\)/))
                     action { [:RIGHT_PAREN, text] }

                  when (text = @ss.scan(/!/))
                     action { [:BANG, text] }

                  when (text = @ss.scan(/[\d]*<&[\d]*\-/))
                     action {
                                    if text.match? /[\d]+<&[\d+]\-/
                                      [:MOVE_FD, text]
                                    else
                                      [:MOVE_FD, "0#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/[\d]*>&[\d]*\-/))
                     action {
                                    if text.match? /[\d]+>&[\d+]\-/
                                      [:MOVE_FD, text]
                                    else
                                      [:MOVE_FD, "1#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/[\d]*<>/))
                     action {
                                    if text.match? /[\d]+<>/
                                      [:OPEN_RW, text]
                                    else
                                      [:OPEN_RW, "0#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/[\d]*>>/))
                     action {
                                    if text.match?(/\d+>>/)
                                      [:APPEND, text]
                                    else
                                      [:APPEND, "1#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/&>>/))
                     action { [:APPEND_BOTH, text] }

                  when (text = @ss.scan(/(&>|>&)/))
                     action { [:REDIRECT_BOTH, text] }

                  when (text = @ss.scan(/[\d]*<&/))
                     action {
                                    if text.match? /[\d]+<&/
                                      [:DUP, text]
                                    else
                                      [:DUP, "0#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/[\d]*>&/))
                     action {
                                    if text.match? /[\d]+>&/
                                      [:DUP, text]
                                    else
                                      [:DUP, "1#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/[\d]*</))
                     action {
                                    if text.match?(/\d+</)
                                      [:REDIRECT, text]
                                    else
                                      [:REDIRECT, "0#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/[\d]*>[\|]*/))
                     action {
                                    if text.match?(/\d+>/)
                                      [:REDIRECT, text]
                                    elsif text.match?(/\d+>\|/)
                                      [:REDIRECT_NOCLOBBER, text]
                                    elsif text.match?(/>\|/)
                                      [:REDIRECT_NOCLOBBER, "1#{text}"]
                                    else
                                      [:REDIRECT, "1#{text}"]
                                    end
                                  }


                  when (text = @ss.scan(/((\\[\s;&\|<>\{\}\(\)]|[^\s\n&\|;<>\{\}\(\)])+)/))
                     action { [:WORD, text] }

                  when (text = @ss.scan(/[ \t]+/))
                    ;

                  when (text = @ss.scan(/\|\|/))
                     action { [:OR, text] }

                  when (text = @ss.scan(/\|&/))
                     action { [:PIPE_AND, text] }

                  when (text = @ss.scan(/\|/))
                     action { [:PIPE, text] }

                  when (text = @ss.scan(/&&/))
                     action { [:AND_AND, text] }

                  when (text = @ss.scan(/&/))
                     action { [:AND, text] }

                  when (text = @ss.scan(/&\>/))
                     action { [:AND_REDIRECT_RIGHT, text] }

                  when (text = @ss.scan(/&\>\>/))
                     action { [:AND_D_REDIRECT_RIGHT, text] }

          
          else
            text = @ss.string[@ss.pos .. -1]
            raise  ScanError, "can not match: '" + text + "'"
          end  # if

        else
          raise  ScanError, "undefined state: '" + state.to_s + "'"
        end  # case state
          token
        end  # def _next_token

  attr_reader :line, :column
  def initialize
    @line   = 1
    @column = 1
  end
  def tokenize code
    scan_setup code
    tokens = []
    while token = next_token
      tokens << token
    end
    tokens
  end
end # class

class Msh::Lexer
  def self.interactive
    while line = Readline.readline("lexer> ", true)&.chomp
      case line
      when "q", "quit", "exit"
        puts "goodbye! <3"
        exit
      else
        begin
          rex = Msh::Lexer.new
          rex.instance_eval { scan_setup line }
          while token = rex.next_token
            p token
          end
        rescue Msh::Lexer::ScanError => e
          puts e.pretty_message(rex)
        end
      end
    end
  end

  # Run the lexer on a file
  #
  # @raises [Msh::Lexer::ScanError]
  def self.lex_file filename
    rex = Msh::Lexer.new
    rex.load_file filename
    while token = rex.next_token
      p token
    end
  end

  # Lex each file passed as input, or run interactively
  def self.start args = ARGV
    return Msh::Lexer.interactive if args.size.zero?

    args.each do |file|
      abort "#{file} is not a file!" unless File.file?(file)
      Msh::Lexer.lex_file file
    end
  rescue Msh::Lexer::ScanError => e
    abort e.message
  end
end
