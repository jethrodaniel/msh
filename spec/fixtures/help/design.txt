DESIGN(1)                         Msh Manual                         DESIGN(1)

NAME
       design - msh's design and goals

SYNOPSIS
       design

GOALS
       ·   be simple

       ·   be friendly

DESIGN
       Msh is, in some ways, a result of PTSD from shells like Bash or sh.

       Notably horric things about those shells

       ·   lexing, parsing, and interpretation are not distinct phases

       ·   parameter expansion ${expression}

       ·   case syntax

       ·   functions and parameters_$1_, etc

       ·   variables (global by default, no space before =, etc)

       Msh tries to keep things simple, and uses Ruby to do most of that

       ·   functions are just Ruby methods

       ·   variables are just Ruby variables

   example
       When Msh executes the following code

           echo the time is #{Time.now} | cowsay

       The following steps are performed

   Preprocessing
       The code is evaluated as a Ruby string, to allow for interpolation via
       #{}.

   Lexing
       The input is converted into tokens.

   Parsing
       The tokens are converted into an abstract syntax tree (AST).

   Interetation
       The AST is executed by a tree-walking interpretor.

MSH
       Part of msh(1).

AUTHOR
       Copyright 2020, Mark Delk under the terms of the MIT license

Msh v0.1.0                        2020-03-15                         DESIGN(1)
