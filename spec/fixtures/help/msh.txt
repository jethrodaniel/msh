MSH(1)                            Msh Manual                            MSH(1)

NAME
       msh - a ruby shell

SYNOPSIS
       msh [options]... [file]...

DESCRIPTION
       Msh is a shell that shares Rubyâ€™s goal

          For me the purpose of life is partly to have joy. Programmers
          often feel joy when they can concentrate on the creative side
          of programming, So Ruby is designed to make programmers happy.
            â€” Yukihiro Matsumoto

       It supports a subset of sh/bash

                  feature                       example
           _____________________________________________________
            ðŸ—¸  | redirect output             | a > b
            ðŸ—¸  | append output               | a >> b
            ðŸ—¸  | redirect input              | a < b
               | redirect to file descriptor | a 2>&1
            ðŸ—¸  | conditionals                | a || b && c
            ðŸ—¸  | commands                    | a; b;
               | grouping                    | a; {b || c}
               | subshells                   | (a)
            ðŸ—¸  | pipes                       | a | b
               | command substitution        | $(a 'b' c)
               | process substitution        | <(a | b)
               | local variables             | a = 2; echo $a
            ðŸ—¸  | environment variables       | a=b a b
               | aliases                     | alias g = 'git'
            ðŸ—¸  | functions                   | repl "def foo; puts :bar; end"; foo

       It allows for interpolation in any words

           $ echo Ï€ â‰ˆ #{Math::PI} | cowsay
            _________________________
           < Ï€ â‰ˆ 3.141592653589793 . >
            -------------------------
                   \   ^__^
                    \  (oo)\_______
                       (__)\       )\/\
                           ||----w |
                           ||     ||

       The underlying REPL is available via the repl builtin. Itâ€™s the same
       context as used during interpolation.

           $ repl
           enter some ruby (sorry, no multiline)
           > def foo; "bar"; end
           => :foo
           > ^D
           $ echo foo#{foo}
           foo bar
           $ echo #{self}
           <Msh::Context:0x0000557a7f0b6f68>

       Functions are just method calls on that same REPL context.

EXAMPLES
       Filter commands

           $ repl
           enter some ruby (sorry, no multiline)
           > def upcase; ARGF.each_line.map(&:upcase).each { |l| puts l }; end
           => :upcase
           > ^D
           $ echo hi | upcase
           HI

       Changing the prompt

           $ repl
           enter some ruby (sorry, no multiline)
           > def prompt; "% "; end
           => "% "
           > ^D
           %

   todo
       Â·   source

       Â·   config file

           $ source file.msh

OPTIONS
       -h, --help
           Show usage information.

       -V, --version
           Show the version.

       --copyright, --license
           Show the copyright.

       -c <command>
           Run a command string as input.

COPYING
       Copyright (C) 2020 Mark Delk. Free use of this software is granted
       under the terms of the MIT License.

RESOURCES
       issue tracker
           https://github.com/jethrodaniel/msh/issues?q=is%3Aopen.

       source code
           https://github.com/jethrodaniel/msh

MSH
       Part of msh(1).

Msh v0.2.0                        2020-06-26                            MSH(1)
