MSH(1)                            Msh Manual                            MSH(1)

NAME
       msh - a ruby shell

SYNOPSIS
       msh [options]... [file]...

DESCRIPTION
       It supports a subset of sh/bash, including

       ·   redirection a 2>&1 > out.log

       ·   redirect output a > b

       ·   append output a >> b

       ·   redirect input a < b

       ·   conditionals a || b && c

       ·   commands a; b;

       ·   grouping a; {b}

       ·   subshells (a) && {b || c; }

       ·   pipes a | b

       ·   command substitution $(a 'b' c) (but no backticks, just $())

       ·   process substitution <(a | b)

       ·   local shell variables, and syntax to manipulate environment
           variables

       It uses Ruby to handle functions, and aliases, and allows for Ruby
       interpolation anywhere in the source.

           $ echo π ≈ #{Math::PI} | cowsay
            _________________________
           < π ≈ 3.141592653589793 . >
            -------------------------
                   \   ^__^
                    \  (oo)\_______
                       (__)\       )\/\
                           ||----w |
                           ||     ||

       Unlike other shells, Msh doesn’t have functions or aliases builtin to
       the language, rather, it tasks that to it’s host, or implementation,
       language (here, Ruby).

       The host language’s REPL is available via repl builtin, and
       additionally processes string interpolation in all commands.

           $ repl
           irb> foo = "bar"
           irb> quit
           $ echo #{foo} #=> bar

   Functions
       Instead of functions, Msh just calls Ruby methods

           $ echo #{def hello name; puts "hello, #{name}"; end}
           $ hello world #=> prints "hello, world"

       Similarly, builtins and aliases are just Ruby methods as well.

           $ builtins

OPTIONS
       -h, --help
           Show usage information.

       -V, --version
           Show the version.

       --copyright, --license
           Show the copyright.

       -c <command>
           Run a command string as input.

COPYING
       Copyright (C) 2020 Mark Delk. Free use of this software is granted
       under the terms of the MIT License.

RESOURCES
       issue tracker
           https://github.com/jethrodaniel/msh/issues?q=is%3Aopen.

       source code
           https://github.com/jethrodaniel/msh

MSH
       Part of msh(1).

Msh v0.2.0                        2020-06-08                            MSH(1)
