MSH(1)                            Msh Manual                            MSH(1)



NAME
       msh - a ruby shell

SYNOPSIS
       msh [options]... [file]...

DESCRIPTION
       Msh is an command language interpreter that executes commands read from
       standard input or from a file.

       It combines the "good" parts of *nix shells with the power of Ruby.

       Msh’s goal is the same as that of Ruby

          For me the purpose of life is partly to have joy. Programmers
          often feel joy when they can concentrate on the creative side
          of programming, So Ruby is designed to make programmers happy.
            — Yukihiro Matsumoto

       It supports a subset of sh/bash, basically just the essential parts.

                  feature                       example
           ┌───┬─────────────────────────────┬──────────────────────────────────────┐
           │ ✓ │ redirect output             │ a > b                                │
           │ ✓ │ append output               │ a >> b                               │
           │ ✓ │ redirect input              │ a < b                                │
           │   │ redirect to file descriptor │ a 2>&1                               │
           │ ~ │ conditionals                │ a || b && c                          │
           │ ✓ │ commands                    │ a; b;                                │
           │   │ grouping                    │ a; {b || c}                          │
           │   │ subshells                   │ (a)                                  │
           │ ✓ │ pipes*                      │ a | b                                │
           │   │ command substitution        │ $(a 'b' c)                           │
           │   │ process substitution        │ <(a | b)                             │
           │   │ local variables             │ a = 2                                │
           │ ✓ │ variable interpolation      │ echo $HOME                           │
           │ ✓ │ environment variables       │ a=b a b                              │
           │   │ aliases                     │ alias g 'git'                        │
           │ ✓ │ functions                   │ repl; def foo;puts :bar;end; ^D foo  │
           └───┴─────────────────────────────┴──────────────────────────────────────┘
           ┌───┬─────────────────────────────┐┌───┬─────────────────────────────┐
           │ ✓ │ feature fully supported     ││   │ feature pending             │
           │ ~ │ feature sorta supported     ││ x │ won't support               │
           └───┴─────────────────────────────┘└───┴─────────────────────────────┘

       NOTE: redirection and pipes won’t work in the executable version of msh
       until MRuby supports IO#reopen.

       NOTE: this is an intentionally small subset of sh, for now.

       It allows for interpolation in words

           $ echo π ≈ #{Math::PI} | cowsay
            _________________________
           < π ≈ 3.141592653589793 . >
            -------------------------
                   \   ^__^
                    \  (oo)\_______
                       (__)\       )\/\
                           ||----w |
                           ||     ||

       The underlying REPL is available via the repl builtin. It’s the same
       context as used during interpolation.

           $ repl
           enter some ruby (sorry, no multiline)
           > def foo; "bar"; end
           => :foo
           > ^D
           $ echo foo#{foo}
           foo bar
           $ echo #{self}
           <Msh::Context:0x0000557a7f0b6f68>

       Functions are just method calls on that same REPL context.

EXAMPLES
       Filter commands

           $ repl
           enter some ruby (sorry, no multiline)
           > def upcase; ARGF.each_line { |l| puts l.upcase }; end
           => :upcase
           > ^D
           $ echo hi | upcase
           HI

       Changing the prompt

           $ repl
           enter some ruby (sorry, no multiline)
           > def prompt; "% "; end
           => "% "
           > ^D
           %

BUILTINS
       Msh’s usage of the term builtin is a bit loose here - builtins can fork
       and exec if they want.

       Plus, since functions are just method calls to a single object, there’s
       a number of builtins already available, such as puts, print,
       respond_to?, etc.

           ┌───────────────────┬─────────────────────────────────────────────────┐
           │ parser [files]... │ Run Msh's parser on input files, or from stdin  │
           │ lexer  [files]... │ Run Msh's lexer on input files, or from stdin   │
           │ help  [topics]... │ Equivalent to 'man msh-topic ...' or 'man msh'  │
           │ cd                │ Change directory, respects '-', 'PWD/OLDPWD'    │
           └───────────────────┴─────────────────────────────────────────────────┘

TODO
       Note: not a comprehensive list, by any means.

           ┌───┬───────────────────────────────────────────────────────────────────┐
           │   │`source file.msh`                                                  │
           │ ~ │ config files                                                      │
           │   │ interrupt handling                                                │
           │   │ control flow such as `if/else/while/loop`                         │
           │   │ tab-completion                                                    │
           │   │ pretty colors                                                     │
           └───┴───────────────────────────────────────────────────────────────────┘

OPTIONS
       -h, --help
           Show usage information.

       -V, --version
           Show the version.

       -c <command>
           Run a command string as input.

COPYING
       Copyright (C) 2020 Mark Delk. Free use of this software is granted
       under the terms of the MIT License.

RESOURCES
       issue tracker
           https://github.com/jethrodaniel/msh/issues?q=is%3Aopen.

       source code
           https://github.com/jethrodaniel/msh

       releases
           https://github.com/jethrodaniel/msh/releases

MSH
       Part of msh(1).



Msh v0.3.0                        2020-10-29                            MSH(1)
