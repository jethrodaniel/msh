---

# TODO: add `:msg:` key for failing examples

:examples:
  # words, filenames, options, etc

  "echo such wow":
    :valid: true
    :tokens: |
      [[:WORD, "echo"],
       [:WORD, "such"],
       [:WORD, "wow"]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "echo"),
          s(:WORD, "such"),
          s(:WORD, "wow")))

  "echo so scare":
    :valid: true
    :tokens: |
      [[:WORD, "echo"],
       [:WORD, "so"],
       [:WORD, "scare"]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "echo"),
          s(:WORD, "so"),
          s(:WORD, "scare")))

  "/usr/bin/program\\ with\\ space \\but\\ this\\ is\\ an\\ arg":
    :valid: true
    :tokens: |
      [[:WORD, "/usr/bin/program\\ with\\ space"],
       [:WORD, "\\but\\ this\\ is\\ an\\ arg"]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "/usr/bin/program\\ with\\ space"),
          s(:WORD, "\\but\\ this\\ is\\ an\\ arg")))

  # "a&&b":
  #   :valid: true
  #   :tokens: |
  #   :ast: |

  # "echo a\\;b":
  #   :valid: true
  #   :tokens: |
  #     [[:WORD, "/usr/bin/program\\ with\\ space"],
  #      [:WORD, "\\but\\ this\\ is\\ an\\ arg"]]
  #   :ast: |
  #     s(:EXPR,
  #       s(:COMMAND,
  #         s(:WORD, "/usr/bin/program\\ with\\ space"),
  #         s(:WORD, "\\but\\ this\\ is\\ an\\ arg")))


  # "find . -name \"*.rb\" -exec sed -i 's/msh/yas/g' {} \\;)":
  #   :tokens: |
  #     [[:WORD, "find"],
  #      [:WORD, "."],
  #      [:WORD, "-name"],
  #      [:DOUBLE_QUOTE_STR, "*.rb"],
  #      [:WORD, "-exec"],
  #      [:WORD, "sed"],
  #      [:WORD, "-i"],
  #      [:SINGLE_QUOTE_STR, "s/msh/yas/g"],
  #      [:WORD, "{}"],
  #      [:LITERAL, ";"]
  #   :ast: |

  "cd ..":
    :valid: true
    :tokens: |
      [[:WORD, "cd"],
       [:WORD, ".."]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "cd"),
          s(:WORD, "..")))

  "...":
    :valid: true
    :tokens: |
      [[:WORD, "..."]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "...")))


  #
  # pipes
  #
  "fortune | cowsay":
    :valid: true
    :tokens: |
      [[:WORD, "fortune"],
       [:PIPE, "|"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:COMMAND,
            s(:WORD, "fortune")),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  # `|&` is sugar for `2>&1 |`

  "fortune |& cowsay":
    :valid: true
    :tokens: |
      [[:WORD, "fortune"],
       [:PIPE_AND, "|&"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:COMMAND,
            s(:WORD, "fortune"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  "fortune >out |& cowsay":
    :valid: true
    :tokens: |
      [[:WORD, "fortune"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE_AND, "|&"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:COMMAND,
            s(:WORD, "fortune"),
              s(:REDIRECTIONS,
                s(:REDIRECT, 1, "out"),
                s(:DUP, 2, 1))),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  "fortune >out | wow |& cowsay":
    :valid: true
    :tokens: |
      [[:WORD, "fortune"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE, "|"],
       [:WORD, "wow"],
       [:PIPE_AND, "|&"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:COMMAND,
            s(:WORD, "fortune"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:COMMAND,
            s(:WORD, "wow"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  "fortune >out | wow |& cowsay | wow":
    :valid: true
    :tokens: |
      [[:WORD, "fortune"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE, "|"],
       [:WORD, "wow"],
       [:PIPE_AND, "|&"],
       [:WORD, "cowsay"],
       [:PIPE, "|"],
       [:WORD, "wow"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:COMMAND,
            s(:WORD, "fortune"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:COMMAND,
            s(:WORD, "wow"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:COMMAND,
            s(:WORD, "cowsay")),
          s(:COMMAND,
            s(:WORD, "wow"))))

  "a >out | b <in >out |& c |& d":
    :valid: true
    :tokens: |
      [[:WORD, "a"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE, "|"],
       [:WORD, "b"],
       [:REDIRECT, "0<"],
       [:WORD, "in"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE_AND, "|&"],
       [:WORD, "c"],
       [:PIPE_AND, "|&"],
       [:WORD, "d"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:COMMAND,
            s(:WORD, "a"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:COMMAND,
            s(:WORD, "b"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 0, "in"),
              s(:REDIRECT, 1, "out"),
              s(:DUP, 2, 1))),
          s(:COMMAND,
            s(:WORD, "c"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:COMMAND,
            s(:WORD, "d"))))

  "! fortune | cowsay":
    :valid: true
    :tokens: |
      [[:BANG, "!"],
       [:WORD, "fortune"],
       [:PIPE, "|"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:NEG_PIPELINE,
          s(:COMMAND,
            s(:WORD, "fortune")),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  "time echo":
    :valid: true
    :tokens: |
      [[:TIME, "time"],
       [:WORD, "echo"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:TIME),
          s(:WORD, "echo")))

  "time -p echo":
    :valid: true
    :tokens: |
      [[:TIME, "time"],
       [:TIME_OPT, "-p"],
       [:WORD, "echo"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:TIME_P),
          s(:WORD, "echo")))

  "echo time":
    :valid: true
    :tokens: |
      [[:WORD, "echo"],
       [:TIME, "time"]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
         s(:WORD, "echo"),
         s(:WORD, "time")))

  "time ! fortune | cowsay":
    :valid: true
    :tokens: |
      [[:TIME, "time"],
       [:BANG, "!"],
       [:WORD, "fortune"],
       [:PIPE, "|"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:NEG_PIPELINE,
          s(:TIME),
          s(:COMMAND,
            s(:WORD, "fortune")),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  "time -p ! fortune | cowsay":
    :valid: true
    :tokens: |
      [[:TIME, "time"],
       [:TIME_OPT, "-p"],
       [:BANG, "!"],
       [:WORD, "fortune"],
       [:PIPE, "|"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:NEG_PIPELINE,
          s(:TIME_P),
          s(:COMMAND,
            s(:WORD, "fortune")),
          s(:COMMAND,
            s(:WORD, "cowsay"))))

  "a | b | c":
   :valid: true
   :tokens: |
     [[:WORD, "a"],
      [:PIPE, "|"],
      [:WORD, "b"],
      [:PIPE, "|"],
      [:WORD, "c"]]
   :ast: |
     s(:EXPR,
       s(:PIPELINE,
         s(:COMMAND,
           s(:WORD, "a")),
         s(:COMMAND,
           s(:WORD, "b")),
         s(:COMMAND,
           s(:WORD, "c"))))

  #
  # conditionals
  #

  "a || b":
    :valid: true
    :tokens: |
      [[:WORD, "a"],
       [:OR, "||"],
       [:WORD, "b"]]
    :ast: |
      s(:EXPR,
        s(:OR,
          s(:COMMAND,
            s(:WORD, "a")),
          s(:COMMAND,
            s(:WORD, "b"))))

  "a && b":
    :valid: true
    :tokens: |
      [[:WORD, "a"],
       [:AND_AND, "&&"],
       [:WORD, "b"]]
    :ast: |
      s(:EXPR,
        s(:AND,
          s(:COMMAND,
            s(:WORD, "a")),
          s(:COMMAND,
            s(:WORD, "b"))))

  #
  # precedence
  #

  "date && date | cowsay":
    :valid: true
    :tokens: |
      [[:WORD, "date"],
       [:AND_AND, "&&"],
       [:WORD, "date"],
       [:PIPE, "|"],
       [:WORD, "cowsay"]]
    :ast: |
      s(:EXPR,
        s(:AND,
          s(:COMMAND,
            s(:WORD, "date")),
          s(:PIPELINE,
            s(:COMMAND,
              s(:WORD, "date")),
            s(:COMMAND,
              s(:WORD, "cowsay")))))

  #
  # groups
  #

  "{a}":
   :valid: true
   :tokens: |
     [[:LEFT_BRACE, "{"],
      [:WORD, "a"],
      [:RIGHT_BRACE, "}"]]
   :ast: |
     s(:EXPR,
       s(:GROUP,
         s(:COMMAND,
           s(:WORD, "a"))))

  "{a;b}>out|c":
    :valid: true
    :tokens: |
      [[:LEFT_BRACE, "{"],
       [:WORD, "a"],
       [:SEMI, ";"],
       [:WORD, "b"],
       [:RIGHT_BRACE, "}"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE, "|"],
       [:WORD, "c"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:GROUP,
            s(:LIST,
              s(:COMMAND,
                s(:WORD, "a")),
              s(:COMMAND,
                s(:WORD, "b"))),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:COMMAND,
            s(:WORD, "c"))))

  #
  # subshells
  #

  "(a)":
   :valid: true
   :tokens: |
     [[:LEFT_PAREN, "("],
      [:WORD, "a"],
      [:RIGHT_PAREN, ")"]]
   :ast: |
     s(:EXPR,
       s(:SUBSHELL,
         s(:COMMAND,
           s(:WORD, "a"))))

  "(a;b)>out|c":
    :valid: true
    :tokens: |
      [[:LEFT_PAREN, "("],
       [:WORD, "a"],
       [:SEMI, ";"],
       [:WORD, "b"],
       [:RIGHT_PAREN, ")"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:PIPE, "|"],
       [:WORD, "c"]]
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:SUBSHELL,
            s(:LIST,
              s(:COMMAND,
                s(:WORD, "a")),
              s(:COMMAND,
                s(:WORD, "b"))),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:COMMAND,
            s(:WORD, "c"))))

  "{a}|(b)>out&&c||d>t;a;{b;c}>wow":
    :valid: true
    :tokens: |
      [[:LEFT_BRACE, "{"],
       [:WORD, "a"],
       [:RIGHT_BRACE, "}"],
       [:PIPE, "|"],
       [:LEFT_PAREN, "("],
       [:WORD, "b"],
       [:RIGHT_PAREN, ")"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:AND_AND, "&&"],
       [:WORD, "c"],
       [:OR, "||"],
       [:WORD, "d"],
       [:REDIRECT, "1>"],
       [:WORD, "t"],
       [:SEMI, ";"],
       [:WORD, "a"],
       [:SEMI, ";"],
       [:LEFT_BRACE, "{"],
       [:WORD, "b"],
       [:SEMI, ";"],
       [:WORD, "c"],
       [:RIGHT_BRACE, "}"],
       [:REDIRECT, "1>"],
       [:WORD, "wow"]]
    :ast: |
      s(:EXPR,
        s(:LIST,
          s(:AND,
            s(:PIPELINE,
              s(:GROUP,
                s(:COMMAND,
                  s(:WORD, "a"))),
              s(:SUBSHELL,
                s(:COMMAND,
                  s(:WORD, "b")),
                s(:REDIRECTIONS,
                  s(:REDIRECT, 1, "out")))),
            s(:OR,
              s(:COMMAND,
                s(:WORD, "c")),
              s(:COMMAND,
                s(:WORD, "d"),
                s(:REDIRECTIONS,
                  s(:REDIRECT, 1, "t"))))),
          s(:COMMAND,
            s(:WORD, "a")),
          s(:GROUP,
            s(:LIST,
              s(:COMMAND,
                s(:WORD, "b")),
              s(:COMMAND,
                s(:WORD, "c"))),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "wow")))))


  #"{a || b}":
  # :valid: true
  # :tokens: |
  #   [[:LEFT_BRACE, "{"],
  #    [:WORD, "a"],
  #    [:RIGHT_BRACE, "}"]]
  # :ast: |
  #   s(:EXPR,
  #     s(:GROUP,
  #       s(:COMMAND,
  #         s(:WORD, "a"))))

  ##
  ## subshells
  ##

  #"(a)":
  # :valid: true
  # :tokens: |
  #   [[:LEFT_PAREN, "("],
  #    [:WORD, "a"],
  #    [:RIGHT_PAREN, ")"]]
  # :ast: |
  #   s(:EXPR,
  #     s(:SUBSHELL,
  #       s(:COMMAND,
  #         s(:WORD, "a"))))

  ##
  ## redirections
  ##

  "ls a <in 1<in >out 2>out >>foo >|wow 3>|ouch &>un &>>mas 4<&1 <&4 >&5 2>&1 13>&2- 6<>foo":
   :valid: true
   :tokens: |
     [[:WORD, "ls"],
      [:WORD, "a"],
      [:REDIRECT, "0<"],
      [:WORD, "in"],
      [:REDIRECT, "1<"],
      [:WORD, "in"],
      [:REDIRECT, "1>"],
      [:WORD, "out"],
      [:REDIRECT, "2>"],
      [:WORD, "out"],
      [:APPEND, "1>>"],
      [:WORD, "foo"],
      [:REDIRECT_NOCLOBBER, "1>|"],
      [:WORD, "wow"],
      [:REDIRECT, "3>|"],
      [:WORD, "ouch"],
      [:REDIRECT_BOTH, "&>"],
      [:WORD, "un"],
      [:APPEND_BOTH, "&>>"],
      [:WORD, "mas"],
      [:DUP, "4<&"],
      [:WORD, "1"],
      [:DUP, "0<&"],
      [:WORD, "4"],
      [:REDIRECT_BOTH, ">&"],
      [:WORD, "5"],
      [:DUP, "2>&"],
      [:WORD, "1"],
      [:MOVE_FD, "13>&2-"],
      [:OPEN_RW, "6<>"],
      [:WORD, "foo"]]
   :ast: |
     s(:EXPR,
       s(:COMMAND,
         s(:WORD, "ls"),
         s(:WORD, "a"),
         s(:REDIRECTIONS,
           s(:REDIRECT, 0, "in"),
           s(:REDIRECT, 1, "in"),
           s(:REDIRECT, 1, "out"),
           s(:REDIRECT, 2, "out"),
           s(:APPEND, 1, "foo"),
           s(:REDIRECT_NOCLOBBER, 1, "wow"),
           s(:REDIRECT, 3, "ouch"),
           s(:REDIRECT_BOTH, "un"),
           s(:APPEND_BOTH, "mas"),
           s(:DUP, 4, 1),
           s(:DUP, 0, 4),
           s(:REDIRECT_BOTH, "5"),
           s(:DUP, 2, 1),
           s(:MOVE_FD, 13, 2),
           s(:OPEN_RW, 6, "foo"))))

  # comments

  "#":
    :valid: true
    :tokens: |
      []
    :ast: |
      s(:NOOP)
  "# look! # a comment!\n\n\n\n":
    :valid: true
    :tokens: |
      []
    :ast: |
      s(:NOOP)

  "fortune # comments continue until one or more newlines":
    :valid: true
    :tokens: |
      [[:WORD, "fortune"]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "fortune")))

  # job control

  #"a &":
  #   :tokens: |
  #     [[:WORD, "a"],
  #      [:BG, "&"]]
  #   :ast: |

  "ls|wow 3>doggo 2>&1 >/dev/null;wow&&wow||o>out&&goose|&duck":
    :valid: true
    :tokens: |
      [[:WORD, "ls"],
       [:PIPE, "|"],
       [:WORD, "wow"],
       [:REDIRECT, "3>"],
       [:WORD, "doggo"],
       [:DUP, "2>&"],
       [:WORD, "1"],
       [:REDIRECT, "1>"],
       [:WORD, "/dev/null"],
       [:SEMI, ";"],
       [:WORD, "wow"],
       [:AND_AND, "&&"],
       [:WORD, "wow"],
       [:OR, "||"],
       [:WORD, "o"],
       [:REDIRECT, "1>"],
       [:WORD, "out"],
       [:AND_AND, "&&"],
       [:WORD, "goose"],
       [:PIPE_AND, "|&"],
       [:WORD, "duck"]]
    :ast: |
      s(:EXPR,
        s(:LIST,
          s(:PIPELINE,
            s(:COMMAND,
              s(:WORD, "ls")),
            s(:COMMAND,
              s(:WORD, "wow"),
              s(:REDIRECTIONS,
                s(:REDIRECT, 3, "doggo"),
                s(:DUP, 2, 1),
                s(:REDIRECT, 1, "/dev/null")))),
          s(:AND,
            s(:COMMAND,
              s(:WORD, "wow")),
            s(:OR,
              s(:COMMAND,
                s(:WORD, "wow")),
              s(:AND,
                s(:COMMAND,
                  s(:WORD, "o"),
                  s(:REDIRECTIONS,
                    s(:REDIRECT, 1, "out"))),
                s(:PIPELINE,
                  s(:COMMAND,
                    s(:WORD, "goose"),
                    s(:REDIRECTIONS,
                      s(:DUP, 2, 1))),
                  s(:COMMAND,
                    s(:WORD, "duck"))))))))

  ? |
    ls
    wow newlines
    yay
  :
    :valid: true
    :tokens: |
      [[:WORD, "ls"],
       [:NEWLINE, "\n"],
       [:WORD, "wow"],
       [:WORD, "newlines"],
       [:NEWLINE, "\n"],
       [:WORD, "yay"],
       [:NEWLINE, "\n"]]
    :ast: |
      s(:EXPR,
        s(:COMMAND,
          s(:WORD, "ls")),
        s(:COMMAND,
          s(:WORD, "wow"),
          s(:WORD, "newlines")),
        s(:COMMAND,
          s(:WORD, "yay")))
