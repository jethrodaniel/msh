---

# large YAML seems to get out of hand quickly, so remember
#
# > Flat is better than nested.
# > Sparse is better than dense.
# > Readability counts.
# >
# > Tim Peters

# TODO: add `:msg:` key for failing examples
#

:examples:

  #
  # multiple expressions
  #

  "echo a; echo b; echo c":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][WORD, "a"]',
       '[1:7-7][SEMI, ";"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-12][WORD, "echo"]',
       '[1:13-13][SPACE, " "]',
       '[1:14-14][WORD, "b"]',
       '[1:15-15][SEMI, ";"]',
       '[1:16-16][SPACE, " "]',
       '[1:17-20][WORD, "echo"]',
       '[1:21-21][SPACE, " "]',
       '[1:22-22][WORD, "c"]',
       '[1:23-23][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "a")))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "b")))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "c")))))
    :exit_code: 0
    :output: |
      a
      b
      c
    :error: |

  #
  # assignments
  #
  "a=b c = d #{:e}=g us#{:er}=you":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-2][EQ, "="]',
       '[1:3-3][WORD, "b"]',
       '[1:4-4][SPACE, " "]',
       '[1:5-5][WORD, "c"]',
       '[1:6-6][SPACE, " "]',
       '[1:7-7][EQ, "="]',
       '[1:8-8][SPACE, " "]',
       '[1:9-9][WORD, "d"]',
       '[1:10-10][SPACE, " "]',
       '[1:11-15][INTERP, "\#{:e}"]',
       '[1:16-16][EQ, "="]',
       '[1:17-17][WORD, "g"]',
       '[1:18-18][SPACE, " "]',
       '[1:19-20][WORD, "us"]',
       '[1:21-26][INTERP, "\#{:er}"]',
       '[1:27-27][EQ, "="]',
       '[1:28-30][WORD, "you"]',
       '[1:31-31][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "a")),
              s(:WORD,
                s(:LIT, "b"))),
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "c")),
              s(:WORD,
                s(:LIT, "d"))),
            s(:ASSIGN,
              s(:WORD,
                s(:INTERP, "\#{:e}")),
              s(:WORD,
                s(:LIT, "g"))),
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "us"),
                s(:INTERP, "\#{:er}")),
              s(:WORD,
                s(:LIT, "you"))))))
    # :exit_code: 0
    # :output: |
    # :error: |

  #
  # variables
  #
  "a=b echo $a":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-2][EQ, "="]',
       '[1:3-3][WORD, "b"]',
       '[1:4-4][SPACE, " "]',
       '[1:5-8][WORD, "echo"]',
       '[1:9-9][SPACE, " "]',
       '[1:10-11][VAR, "$a"]',
       '[1:12-12][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "a")),
              s(:WORD,
                s(:LIT, "b"))),
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:VAR, "$a")))))
    :exit_code: 0
    :output: "\n"
    :error: |

  ? |
    echo $USER
    USER=foo
    echo $USER
    USER=bar echo $USER
    echo $USER
    USER=bar
    echo $USER
  :
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-10][VAR, "$USER"]',
       '[1:11-11][NEWLINE, "\n"]',
       '[2:1-4][WORD, "USER"]',
       '[2:5-5][EQ, "="]',
       '[2:6-8][WORD, "foo"]',
       '[2:9-9][NEWLINE, "\n"]',
       '[3:1-4][WORD, "echo"]',
       '[3:5-5][SPACE, " "]',
       '[3:6-10][VAR, "$USER"]',
       '[3:11-11][NEWLINE, "\n"]',
       '[4:1-4][WORD, "USER"]',
       '[4:5-5][EQ, "="]',
       '[4:6-8][WORD, "bar"]',
       '[4:9-9][SPACE, " "]',
       '[4:10-13][WORD, "echo"]',
       '[4:14-14][SPACE, " "]',
       '[4:15-19][VAR, "$USER"]',
       '[4:20-20][NEWLINE, "\n"]',
       '[5:1-4][WORD, "echo"]',
       '[5:5-5][SPACE, " "]',
       '[5:6-10][VAR, "$USER"]',
       '[5:11-11][NEWLINE, "\n"]',
       '[6:1-4][WORD, "USER"]',
       '[6:5-5][EQ, "="]',
       '[6:6-8][WORD, "bar"]',
       '[6:9-9][NEWLINE, "\n"]',
       '[7:1-4][WORD, "echo"]',
       '[7:5-5][SPACE, " "]',
       '[7:6-10][VAR, "$USER"]',
       '[7:11-11][NEWLINE, "\n"]',
       '[8:1-1][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:VAR, "$USER")))),
        s(:EXPR,
          s(:CMD,
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "USER")),
              s(:WORD,
                s(:LIT, "foo"))))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:VAR, "$USER")))),
        s(:EXPR,
          s(:CMD,
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "USER")),
              s(:WORD,
                s(:LIT, "bar"))),
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:VAR, "$USER")))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:VAR, "$USER")))),
        s(:EXPR,
          s(:CMD,
            s(:ASSIGN,
              s(:WORD,
                s(:LIT, "USER")),
              s(:WORD,
                s(:LIT, "bar"))))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:VAR, "$USER")))))
    :env:
      USER: 'matz'
    :exit_code: 0
    :output: |
      matz
      foo
      foo
      foo
      bar
    :error: |

  #
  # words, filenames, options, etc
  #

  "echo such wow":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-9][WORD, "such"]',
       '[1:10-10][SPACE, " "]',
       '[1:11-13][WORD, "wow"]',
       '[1:14-14][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "such")),
            s(:WORD,
              s(:LIT, "wow")))))
    :exit_code: 0
    :output: |
      such wow
    :error: |


  "echo so scare":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-7][WORD, "so"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-13][WORD, "scare"]',
       '[1:14-14][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "so")),
            s(:WORD,
              s(:LIT, "scare")))))
    :exit_code: 0
    :output: |
      so scare
    :error: |

  "/usr/bin/program\\ with\\ space \\but\\ this\\ is\\ an\\ arg":
    :valid: false
    :tokens: |
    :ast: |
      s(:EXPR,
        s(:CMD,
          s(:WORD,
            s(:LIT, "/usr/bin/program\\ with\\ space")),
          s(:WORD,
            s(:LIT, "\\but\\ this\\ is\\ an\\ arg"))))

  #
  # conditionals
  #

  "echo a && echo b":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][WORD, "a"]',
       '[1:7-7][SPACE, " "]',
       '[1:8-9][AND, "&&"]',
       '[1:10-10][SPACE, " "]',
       '[1:11-14][WORD, "echo"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-16][WORD, "b"]',
       '[1:17-17][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:AND,
            s(:CMD,
              s(:WORD,
                s(:LIT, "echo")),
              s(:WORD,
                s(:LIT, "a"))),
            s(:CMD,
              s(:WORD,
                s(:LIT, "echo")),
              s(:WORD,
                s(:LIT, "b"))))))
    :exit_code: 0
    :output: |
      a
      b
    :error: |

  "echo a || echo b":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][WORD, "a"]',
       '[1:7-7][SPACE, " "]',
       '[1:8-9][OR, "||"]',
       '[1:10-10][SPACE, " "]',
       '[1:11-14][WORD, "echo"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-16][WORD, "b"]',
       '[1:17-17][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:OR,
            s(:CMD,
              s(:WORD,
                s(:LIT, "echo")),
              s(:WORD,
                s(:LIT, "a"))),
            s(:CMD,
              s(:WORD,
                s(:LIT, "echo")),
              s(:WORD,
                s(:LIT, "b"))))))
    :exit_code: 0
    :output: |
      a
    :error: |

  "echo a\\;b":
    :valid: false
    :tokens: |
      [[:WORD, "a"],
       [:WORD, "\\but\\ this\\ is\\ an\\ arg"]]
    :ast: |
      s(:EXPR,
        s(:CMD,
          s(:WORD, "/usr/bin/program\\ with\\ space"),
          s(:WORD, "\\but\\ this\\ is\\ an\\ arg")))

  "find . -name \"*.rb\" -exec sed -i 's/msh/yas/g' {} \\;)":
    :tokens: |
      [[:WORD, "find"],
       [:WORD, "."],
       [:WORD, "-name"],
       [:DOUBLE_QUOTE_STR, "*.rb"],
       [:WORD, "-exec"],
       [:WORD, "sed"],
       [:WORD, "-i"],
       [:SINGLE_QUOTE_STR, "s/msh/yas/g"],
       [:WORD, "{}"],
       [:LIT, ";"]
    :ast: |

  "cd ..":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: false
    :tokens: |
      ['[1:1-2][WORD, "cd"]',
       '[1:3-3][SPACE, " "]',
       '[1:4-5][WORD, ".."]',
       '[1:6-6][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "cd")),
            s(:WORD,
              s(:LIT, "..")))))

  "...":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-3][WORD, "..."]',
       '[1:4-4][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:CMD,
          s(:WORD,
            s(:LIT, "..."))))

  #
  # pipes
  #
  "echo hello | wc -l":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-10][WORD, "hello"]',
       '[1:11-11][SPACE, " "]',
       '[1:12-12][PIPE, "|"]',
       '[1:13-13][SPACE, " "]',
       '[1:14-15][WORD, "wc"]',
       '[1:16-16][SPACE, " "]',
       '[1:17-18][WORD, "-l"]',
       '[1:19-19][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:PIPELINE,
            s(:CMD,
              s(:WORD,
                s(:LIT, "echo")),
              s(:WORD,
                s(:LIT, "hello"))),
            s(:CMD,
              s(:WORD,
                s(:LIT, "wc")),
              s(:WORD,
                s(:LIT, "-l"))))))
    :exit_code: 0
    :output: |
      1
    :error: |

  #
  # `|&` is sugar for `2>&1 |`
  #

  "fortune |& cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-7][WORD, "fortune"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-10][PIPE_AND, "|&"]',
       '[1:11-11][SPACE, " "]',
       '[1:12-17][WORD, "cowsay"]',
       '[1:18-18][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:CMD,
            s(:WORD, "fortune"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:CMD,
            s(:WORD, "cowsay"))))

  # redirections

  ">out":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][REDIRECT_OUT, ">"]',
       '[1:2-4][WORD, "out"]',
       '[1:5-5][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:REDIRECT, 1, :REDIRECT_OUT, "out"))))
    # :interpreter_spec: |
    #   File.exists?("out") && File.read("out") == ""

  "2>&1":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][DUP_OUT_FD, "2>&1"]',
       '[1:5-5][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:REDIRECT, 2, :DUP_OUT_FD))))

  "fortune >out |& cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-7][WORD, "fortune"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-9][REDIRECT_OUT, ">"]',
       '[1:10-12][WORD, "out"]',
       '[1:13-13][SPACE, " "]',
       '[1:14-15][PIPE_AND, "|&"]',
       '[1:16-16][SPACE, " "]',
       '[1:17-22][WORD, "cowsay"]',
       '[1:23-23][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:CMD,
            s(:WORD, "fortune"),
              s(:REDIRECTIONS,
                s(:REDIRECT, 1, "out"),
                s(:DUP, 2, 1))),
          s(:CMD,
            s(:WORD, "cowsay"))))

  "fortune >out | wow |& cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-7][WORD, "fortune"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-9][REDIRECT_OUT, ">"]',
       '[1:10-12][WORD, "out"]',
       '[1:13-13][SPACE, " "]',
       '[1:14-14][PIPE, "|"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-18][WORD, "wow"]',
       '[1:19-19][SPACE, " "]',
       '[1:20-21][PIPE_AND, "|&"]',
       '[1:22-22][SPACE, " "]',
       '[1:23-28][WORD, "cowsay"]',
       '[1:29-29][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:CMD,
            s(:WORD, "fortune"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:CMD,
            s(:WORD, "wow"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:CMD,
            s(:WORD, "cowsay"))))

  "fortune >out | wow |& cowsay | wow":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-7][WORD, "fortune"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-9][REDIRECT_OUT, ">"]',
       '[1:10-12][WORD, "out"]',
       '[1:13-13][SPACE, " "]',
       '[1:14-14][PIPE, "|"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-18][WORD, "wow"]',
       '[1:19-19][SPACE, " "]',
       '[1:20-21][PIPE_AND, "|&"]',
       '[1:22-22][SPACE, " "]',
       '[1:23-28][WORD, "cowsay"]',
       '[1:29-29][SPACE, " "]',
       '[1:30-30][PIPE, "|"]',
       '[1:31-31][SPACE, " "]',
       '[1:32-34][WORD, "wow"]',
       '[1:35-35][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:CMD,
            s(:WORD, "fortune"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:CMD,
            s(:WORD, "wow"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:CMD,
            s(:WORD, "cowsay")),
          s(:CMD,
            s(:WORD, "wow"))))

  "a >out | b <in >out |& c |& d":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-2][SPACE, " "]',
       '[1:3-3][REDIRECT_OUT, ">"]',
       '[1:4-6][WORD, "out"]',
       '[1:7-7][SPACE, " "]',
       '[1:8-8][PIPE, "|"]',
       '[1:9-9][SPACE, " "]',
       '[1:10-10][WORD, "b"]',
       '[1:11-11][SPACE, " "]',
       '[1:12-12][REDIRECT_IN, "<"]',
       '[1:13-14][WORD, "in"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-16][REDIRECT_OUT, ">"]',
       '[1:17-19][WORD, "out"]',
       '[1:20-20][SPACE, " "]',
       '[1:21-22][PIPE_AND, "|&"]',
       '[1:23-23][SPACE, " "]',
       '[1:24-24][WORD, "c"]',
       '[1:25-25][SPACE, " "]',
       '[1:26-27][PIPE_AND, "|&"]',
       '[1:28-28][SPACE, " "]',
       '[1:29-29][WORD, "d"]',
       '[1:30-30][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:CMD,
            s(:WORD, "a"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:CMD,
            s(:WORD, "b"),
            s(:REDIRECTIONS,
              s(:REDIRECT, 0, "in"),
              s(:REDIRECT, 1, "out"),
              s(:DUP, 2, 1))),
          s(:CMD,
            s(:WORD, "c"),
            s(:REDIRECTIONS,
              s(:DUP, 2, 1))),
          s(:CMD,
            s(:WORD, "d"))))

  "! fortune | cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][BANG, "!"]',
       '[1:2-2][SPACE, " "]',
       '[1:3-9][WORD, "fortune"]',
       '[1:10-10][SPACE, " "]',
       '[1:11-11][PIPE, "|"]',
       '[1:12-12][SPACE, " "]',
       '[1:13-18][WORD, "cowsay"]',
       '[1:19-19][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:NEG_PIPELINE,
          s(:CMD,
            s(:WORD, "fortune")),
          s(:CMD,
            s(:WORD, "cowsay"))))

  "time echo":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][TIME, "time"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-9][WORD, "echo"]',
       '[1:10-10][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:TIME, "time")),
            s(:WORD,
              s(:LIT, "echo")))))

  "time -p echo":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][TIME, "time"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-7][WORD, "-p"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-12][WORD, "echo"]',
       '[1:13-13][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:TIME_P),
          s(:WORD, "echo")))

  "echo time":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-9][TIME, "time"]',
       '[1:10-10][EOF, "\\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "time")))))
    :exit_code: 0
    :output: |
      time
    :error: |



  "time ! fortune | cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][TIME, "time"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][BANG, "!"]',
       '[1:7-7][SPACE, " "]',
       '[1:8-14][WORD, "fortune"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-16][PIPE, "|"]',
       '[1:17-17][SPACE, " "]',
       '[1:18-23][WORD, "cowsay"]',
       '[1:24-24][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:NEG_PIPELINE,
          s(:CMD,
            s(:WORD, "fortune")),
          s(:CMD,
            s(:WORD, "cowsay"))))

  "time -p ! fortune | cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][TIME, "time"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-7][WORD, "-p"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-9][BANG, "!"]',
       '[1:10-10][SPACE, " "]',
       '[1:11-17][WORD, "fortune"]',
       '[1:18-18][SPACE, " "]',
       '[1:19-19][PIPE, "|"]',
       '[1:20-20][SPACE, " "]',
       '[1:21-26][WORD, "cowsay"]',
       '[1:27-27][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:NEG_PIPELINE,
          s(:CMD,
            s(:WORD, "fortune")),
          s(:CMD,
            s(:WORD, "cowsay"))))

  "a | b | c":
   :lexer_valid: true
   :parser_valid: false
   :interpreter_valid: false
   :tokens: |
     ['[1:1-1][WORD, "a"]',
      '[1:2-2][SPACE, " "]',
      '[1:3-3][PIPE, "|"]',
      '[1:4-4][SPACE, " "]',
      '[1:5-5][WORD, "b"]',
      '[1:6-6][SPACE, " "]',
      '[1:7-7][PIPE, "|"]',
      '[1:8-8][SPACE, " "]',
      '[1:9-9][WORD, "c"]',
      '[1:10-10][EOF, "\\u0000"]']
   :ast: |
     s(:EXPR,
       s(:PIPELINE,
         s(:CMD,
           s(:WORD, "a")),
         s(:CMD,
           s(:WORD, "b")),
         s(:CMD,
           s(:WORD, "c"))))

  #
  # conditionals
  #

  "a || b":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-2][SPACE, " "]',
       '[1:3-4][OR, "||"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][WORD, "b"]',
       '[1:7-7][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:OR,
          s(:CMD,
            s(:WORD, "a")),
          s(:CMD,
            s(:WORD, "b"))))

  "a && b":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-2][SPACE, " "]',
       '[1:3-4][AND, "&&"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][WORD, "b"]',
       '[1:7-7][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:AND,
          s(:CMD,
            s(:WORD, "a")),
          s(:CMD,
            s(:WORD, "b"))))

  #
  # precedence
  #

  "date && date | cowsay":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][WORD, "date"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-7][AND, "&&"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-12][WORD, "date"]',
       '[1:13-13][SPACE, " "]',
       '[1:14-14][PIPE, "|"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-21][WORD, "cowsay"]',
       '[1:22-22][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:AND,
          s(:CMD,
            s(:WORD, "date")),
          s(:PIPELINE,
            s(:CMD,
              s(:WORD, "date")),
            s(:CMD,
              s(:WORD, "cowsay")))))

  #
  # groups
  #

  "{a}":
   :lexer_valid: true
   :parser_valid: false
   :interpreter_valid: false
   :tokens: |
     ['[1:1-1][LEFT_BRACE, "{"]',
      '[1:2-2][WORD, "a"]',
      '[1:3-3][RIGHT_BRACE, "}"]',
      '[1:4-4][EOF, "\\u0000"]']
   :ast: |
     s(:EXPR,
       s(:GROUP,
         s(:CMD,
           s(:WORD, "a"))))

  "{a;b}>out|c":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][LEFT_BRACE, "{"]',
       '[1:2-2][WORD, "a"]',
       '[1:3-3][SEMI, ";"]',
       '[1:4-4][WORD, "b"]',
       '[1:5-5][RIGHT_BRACE, "}"]',
       '[1:6-6][REDIRECT_OUT, ">"]',
       '[1:7-9][WORD, "out"]',
       '[1:10-10][PIPE, "|"]',
       '[1:11-11][WORD, "c"]',
       '[1:12-12][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:GROUP,
            s(:LIST,
              s(:CMD,
                s(:WORD, "a")),
              s(:CMD,
                s(:WORD, "b"))),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:CMD,
            s(:WORD, "c"))))

  #
  # subshells
  #

  "(a)":
   :lexer_valid: true
   :parser_valid: false
   :interpreter_valid: false
   :tokens: |
     ['[1:1-1][LEFT_PAREN, "("]',
      '[1:2-2][WORD, "a"]',
      '[1:3-3][RIGHT_PAREN, ")"]',
      '[1:4-4][EOF, "\\u0000"]']
   :ast: |
     s(:EXPR,
       s(:SUBSHELL,
         s(:CMD,
           s(:WORD, "a"))))

  "(a;b)>out|c":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][LEFT_PAREN, "("]',
       '[1:2-2][WORD, "a"]',
       '[1:3-3][SEMI, ";"]',
       '[1:4-4][WORD, "b"]',
       '[1:5-5][RIGHT_PAREN, ")"]',
       '[1:6-6][REDIRECT_OUT, ">"]',
       '[1:7-9][WORD, "out"]',
       '[1:10-10][PIPE, "|"]',
       '[1:11-11][WORD, "c"]',
       '[1:12-12][EOF, "\\u0000"]']
    :ast: |
      s(:EXPR,
        s(:PIPELINE,
          s(:SUBSHELL,
            s(:LIST,
              s(:CMD,
                s(:WORD, "a")),
              s(:CMD,
                s(:WORD, "b"))),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "out"))),
          s(:CMD,
            s(:WORD, "c"))))

  "{a}|(b)>out&&c||d>t;a;{b;c}>wow":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][LEFT_BRACE, "{"]',
       '[1:2-2][WORD, "a"]',
       '[1:3-3][RIGHT_BRACE, "}"]',
       '[1:4-4][PIPE, "|"]',
       '[1:5-5][LEFT_PAREN, "("]',
       '[1:6-6][WORD, "b"]',
       '[1:7-7][RIGHT_PAREN, ")"]',
       '[1:8-8][REDIRECT_OUT, ">"]',
       '[1:9-11][WORD, "out"]',
       '[1:12-13][AND, "&&"]',
       '[1:14-14][WORD, "c"]',
       '[1:15-16][OR, "||"]',
       '[1:17-17][WORD, "d"]',
       '[1:18-18][REDIRECT_OUT, ">"]',
       '[1:19-19][WORD, "t"]',
       '[1:20-20][SEMI, ";"]',
       '[1:21-21][WORD, "a"]',
       '[1:22-22][SEMI, ";"]',
       '[1:23-23][LEFT_BRACE, "{"]',
       '[1:24-24][WORD, "b"]',
       '[1:25-25][SEMI, ";"]',
       '[1:26-26][WORD, "c"]',
       '[1:27-27][RIGHT_BRACE, "}"]',
       '[1:28-28][REDIRECT_OUT, ">"]',
       '[1:29-31][WORD, "wow"]',
       '[1:32-32][EOF, "\u0000"]']
    :ast: |
      s(:EXPR,
        s(:LIST,
          s(:AND,
            s(:PIPELINE,
              s(:GROUP,
                s(:CMD,
                  s(:WORD, "a"))),
              s(:SUBSHELL,
                s(:CMD,
                  s(:WORD, "b")),
                s(:REDIRECTIONS,
                  s(:REDIRECT, 1, "out")))),
            s(:OR,
              s(:CMD,
                s(:WORD, "c")),
              s(:CMD,
                s(:WORD, "d"),
                s(:REDIRECTIONS,
                  s(:REDIRECT, 1, "t"))))),
          s(:CMD,
            s(:WORD, "a")),
          s(:GROUP,
            s(:LIST,
              s(:CMD,
                s(:WORD, "b")),
              s(:CMD,
                s(:WORD, "c"))),
            s(:REDIRECTIONS,
              s(:REDIRECT, 1, "wow")))))

  "{a || b}":
   :lexer_valid: true
   :parser_valid: false
   :interpreter_valid: false
   :tokens: |
     ['[1:1-1][LEFT_BRACE, "{"]',
      '[1:2-2][WORD, "a"]',
      '[1:3-3][SPACE, " "]',
      '[1:4-5][OR, "||"]',
      '[1:6-6][SPACE, " "]',
      '[1:7-7][WORD, "b"]',
      '[1:8-8][RIGHT_BRACE, "}"]',
      '[1:9-9][EOF, "\\u0000"]']
   :ast: |
     s(:EXPR,
       s(:GROUP,
         s(:CMD,
           s(:WORD, "a"))))

  #
  # redirections
  #

  "42>out":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-3][REDIRECT_OUT, "42>"]',
       '[1:4-6][WORD, "out"]',
       '[1:7-7][EOF, "\u0000"]']
    :ast: |

  "2>out 1 4>out":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-2][REDIRECT_OUT, "2>"]',
       '[1:3-5][WORD, "out"]',
       '[1:6-6][SPACE, " "]',
       '[1:7-7][WORD, "1"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-10][REDIRECT_OUT, "4>"]',
       '[1:11-13][WORD, "out"]',
       '[1:14-14][EOF, "\u0000"]']
    :ast: |

  "ls a <in 1<in >out 2>out >>foo >|wow 3>|ouch &>un &>>mas 4<&1 <&4 >&5 2>&1 13>&2- 6<>foo":
   :lexer_valid: true
   :parser_valid: false
   :interpreter_valid: false
   :tokens: |
     ['[1:1-2][WORD, "ls"]',
      '[1:3-3][SPACE, " "]',
      '[1:4-4][WORD, "a"]',
      '[1:5-5][SPACE, " "]',
      '[1:6-6][REDIRECT_IN, "<"]',
      '[1:7-8][WORD, "in"]',
      '[1:9-9][SPACE, " "]',
      '[1:10-11][REDIRECT_IN, "1<"]',
      '[1:12-13][WORD, "in"]',
      '[1:14-14][SPACE, " "]',
      '[1:15-15][REDIRECT_OUT, ">"]',
      '[1:16-18][WORD, "out"]',
      '[1:19-19][SPACE, " "]',
      '[1:20-21][REDIRECT_OUT, "2>"]',
      '[1:22-24][WORD, "out"]',
      '[1:25-25][SPACE, " "]',
      '[1:26-27][APPEND_OUT, ">>"]',
      '[1:28-30][WORD, "foo"]',
      '[1:31-31][SPACE, " "]',
      '[1:32-33][NO_CLOBBER, ">|"]',
      '[1:34-36][WORD, "wow"]',
      '[1:37-37][SPACE, " "]',
      '[1:38-40][NO_CLOBBER, "3>|"]',
      '[1:41-44][WORD, "ouch"]',
      '[1:45-45][SPACE, " "]',
      '[1:46-47][AND_REDIRECT_RIGHT, "&>"]',
      '[1:48-49][WORD, "un"]',
      '[1:50-50][SPACE, " "]',
      '[1:51-53][AND_D_REDIRECT_RIGHT, "&>>"]',
      '[1:54-56][WORD, "mas"]',
      '[1:57-57][SPACE, " "]',
      '[1:58-61][DUP_IN_FD, "4<&1"]',
      '[1:62-62][SPACE, " "]',
      '[1:63-65][DUP_IN_FD, "<&4"]',
      '[1:66-66][SPACE, " "]',
      '[1:67-69][DUP_OUT_FD, ">&5"]',
      '[1:70-70][SPACE, " "]',
      '[1:71-74][DUP_OUT_FD, "2>&1"]',
      '[1:75-75][SPACE, " "]',
      '[1:76-80][DUP_OUT_FD, "13>&2"]',
      '[1:81-81][WORD, "-"]',
      '[1:82-82][SPACE, " "]',
      '[1:83-85][OPEN_RW, "6<>"]',
      '[1:86-88][WORD, "foo"]',
      '[1:89-89][EOF, "\u0000"]']
   :ast: |
     s(:EXPR,
       s(:CMD,
         s(:WORD, "ls"),
         s(:WORD, "a"),
         s(:REDIRECTIONS,
           s(:REDIRECT, 0, "in"),
           s(:REDIRECT, 1, "in"),
           s(:REDIRECT, 1, "out"),
           s(:REDIRECT, 2, "out"),
           s(:APPEND, 1, "foo"),
           s(:REDIRECT_NOCLOBBER, 1, "wow"),
           s(:REDIRECT, 3, "ouch"),
           s(:REDIRECT_BOTH, "un"),
           s(:APPEND_BOTH, "mas"),
           s(:DUP, 4, 1),
           s(:DUP, 0, 4),
           s(:REDIRECT_BOTH, "5"),
           s(:DUP, 2, 1),
           s(:MOVE_FD, 13, 2),
           s(:OPEN_RW, 6, "foo"))))

  #
  # comments
  #

  "#":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][COMMENT, "#"]',
       '[1:2-2][EOF, "\\u0000"]']
    :ast: |
      s(:NOOP)

  "#x":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-2][COMMENT, "#x"]',
       '[1:3-3][EOF, "\\u0000"]']
    :ast: |
      s(:NOOP)

  "# look! # a comment!\n\n\n\n":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-20][COMMENT, "# look! # a comment!"]',
       '[1:21-21][NEWLINE, "\n"]',
       '[2:1-1][NEWLINE, "\n"]',
       '[3:1-1][NEWLINE, "\n"]',
       '[4:1-1][NEWLINE, "\n"]',
       '[5:1-1][EOF, "\u0000"]']
    :ast: |
       s(:NOOP)

  "fortune # comments continue until one or more newlines":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-7][WORD, "fortune"]',
       '[1:8-8][SPACE, " "]',
       '[1:9-54][COMMENT, "# comments continue until one or more newlines"]',
       '[1:55-55][EOF, "\u0000"]']
    :ast: |
      s(:EXPR,
        s(:CMD,
          s(:WORD, "fortune")))

  # job control

  "a &":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-2][SPACE, " "]',
       '[1:3-3][BG, "&"]',
       '[1:4-4][EOF, "\u0000"]']
    :ast: |


  #
  # stress-testing
  #

  "ls|wow 3>doggo 2>&1 >/dev/null;wow&&wow||o>out&&goose|&duck":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-2][WORD, "ls"]',
       '[1:3-3][PIPE, "|"]',
       '[1:4-6][WORD, "wow"]',
       '[1:7-7][SPACE, " "]',
       '[1:8-9][REDIRECT_OUT, "3>"]',
       '[1:10-14][WORD, "doggo"]',
       '[1:15-15][SPACE, " "]',
       '[1:16-19][DUP_OUT_FD, "2>&1"]',
       '[1:20-20][SPACE, " "]',
       '[1:21-21][REDIRECT_OUT, ">"]',
       '[1:22-30][WORD, "/dev/null"]',
       '[1:31-31][SEMI, ";"]',
       '[1:32-34][WORD, "wow"]',
       '[1:35-36][AND, "&&"]',
       '[1:37-39][WORD, "wow"]',
       '[1:40-41][OR, "||"]',
       '[1:42-42][WORD, "o"]',
       '[1:43-43][REDIRECT_OUT, ">"]',
       '[1:44-46][WORD, "out"]',
       '[1:47-48][AND, "&&"]',
       '[1:49-53][WORD, "goose"]',
       '[1:54-55][PIPE_AND, "|&"]',
       '[1:56-59][WORD, "duck"]',
       '[1:60-60][EOF, "\u0000"]']
    :ast: |
      s(:EXPR,
        s(:LIST,
          s(:PIPELINE,
            s(:CMD,
              s(:WORD, "ls")),
            s(:CMD,
              s(:WORD, "wow"),
              s(:REDIRECTIONS,
                s(:REDIRECT, 3, "doggo"),
                s(:DUP, 2, 1),
                s(:REDIRECT, 1, "/dev/null")))),
          s(:AND,
            s(:CMD,
              s(:WORD, "wow")),
            s(:OR,
              s(:CMD,
                s(:WORD, "wow")),
              s(:AND,
                s(:CMD,
                  s(:WORD, "o"),
                  s(:REDIRECTIONS,
                    s(:REDIRECT, 1, "out"))),
                s(:PIPELINE,
                  s(:CMD,
                    s(:WORD, "goose"),
                    s(:REDIRECTIONS,
                      s(:DUP, 2, 1))),
                  s(:CMD,
                    s(:WORD, "duck"))))))))

  #
  # newlines
  #

  ? |
    echo hi
    echo newlines
    echo yay
  :
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-7][WORD, "hi"]',
       '[1:8-8][NEWLINE, "\n"]',
       '[2:1-4][WORD, "echo"]',
       '[2:5-5][SPACE, " "]',
       '[2:6-13][WORD, "newlines"]',
       '[2:14-14][NEWLINE, "\n"]',
       '[3:1-4][WORD, "echo"]',
       '[3:5-5][SPACE, " "]',
       '[3:6-8][WORD, "yay"]',
       '[3:9-9][NEWLINE, "\n"]',
       '[4:1-1][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "hi")))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "newlines")))),
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:LIT, "yay")))))
    :exit_code: 0
    :error: |
    :output: |
      hi
      newlines
      yay

  #
  # interpolation
  #

  "echo #{Math::PI}":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: true
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-16][INTERP, "\#{Math::PI}"]',
       '[1:17-17][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:INTERP, "\#{Math::PI}")))))
    :exit_code: 0
    :output: |
      3.141592653589793
    :error: |

  "a#{#{:b}#{:c}}d":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-1][WORD, "a"]',
       '[1:2-14][INTERP, "\#{\#{:b}\#{:c}}"]',
       '[1:15-15][WORD, "d"]',
       '[1:16-16][EOF, "\u0000"]']
    :ast: |
      s(:EXPR,
        s(:CMD,
          s(:WORD,
            s(:LIT, "a"),
            s(:INTERP, "\#{\#{:b}\#{:c}}"),
            s(:LIT, "d"))))

  "echo #{:a} #{:b}":
    :lexer_valid: true
    :parser_valid: true
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-10][INTERP, "\#{:a}"]',
       '[1:11-11][SPACE, " "]',
       '[1:12-16][INTERP, "\#{:b}"]',
       '[1:17-17][EOF, "\u0000"]']
    :ast: |
      s(:PROG,
        s(:EXPR,
          s(:CMD,
            s(:WORD,
              s(:LIT, "echo")),
            s(:WORD,
              s(:INTERP, "\#{:a}")),
            s(:WORD,
              s(:INTERP, "\#{:b}")))))

  # TODO:
  #   s(:WORD,
  #     s(:LIT, "a")) for all the WORDs
  "echo a#{:b}c#{:d}e a#{:b} #{:c}d #{1}#{2}":
    :lexer_valid: true
    :parser_valid: false
    :interpreter_valid: false
    :tokens: |
      ['[1:1-4][WORD, "echo"]',
       '[1:5-5][SPACE, " "]',
       '[1:6-6][WORD, "a"]',
       '[1:7-11][INTERP, "\#{:b}"]',
       '[1:12-12][WORD, "c"]',
       '[1:13-17][INTERP, "\#{:d}"]',
       '[1:18-18][WORD, "e"]',
       '[1:19-19][SPACE, " "]',
       '[1:20-20][WORD, "a"]',
       '[1:21-25][INTERP, "\#{:b}"]',
       '[1:26-26][SPACE, " "]',
       '[1:27-31][INTERP, "\#{:c}"]',
       '[1:32-32][WORD, "d"]',
       '[1:33-33][SPACE, " "]',
       '[1:34-37][INTERP, "\#{1}"]',
       '[1:38-41][INTERP, "\#{2}"]',
       '[1:42-42][EOF, "\u0000"]']
    :ast: |
      s(:EXPR,
        s(:CMD,
          s(:WORD, "echo"),
          s(:WORD,
            s(:LIT, "a"),
            s(:INTERP, ":b"),
            s(:LIT, "c"),
            s(:INTERP, ":d"),
            s(:LIT, "e")),
          s(:WORD,
            s(:LIT, "a"),
            s(:INTERP, ":b")),
          s(:WORD,
            s(:INTERP, ":c"),
            s(:LIT, "d")),
          s(:WORD,
            s(:INTERP, "1"),
            s(:INTERP, "2"))))
