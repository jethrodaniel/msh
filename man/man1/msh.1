'\" t
.\"     Title: msh
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-07-26
.\"    Manual: Msh Manual
.\"    Source: Msh v0.3.0
.\"  Language: English
.\"
.TH "MSH" "1" "2020-07-26" "Msh v0.3.0" "Msh Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
msh \- a ruby shell
.SH "SYNOPSIS"
.sp
\fBmsh\fP [\fIoptions\fP]... [\fIfile\fP]...
.SH "DESCRIPTION"
.sp
Msh is an command language interpreter that executes commands read from
standard input or from a file.
.sp
It combines the "good" parts of *nix shells with the power of Ruby.
.sp
Msh\(cqs goal is the same as that of Ruby
.RS 3
.ll -.6i
.sp
For me the purpose of life is partly to have joy. Programmers often feel
joy when they can concentrate on the creative side of programming, So Ruby
is designed to make programmers happy.
.br
.RE
.ll
.RS 5
.ll -.10i
\(em Yukihiro Matsumoto
.RE
.ll
.sp
It supports a subset of \f(CRsh\fP/\f(CRbash\fP, basically just the \fIessential\fP parts.
.sp
.if n .RS 4
.nf
       feature                       example
┌───┬─────────────────────────────┬──────────────────────────────────────┐
│ ✓ │ redirect output             │ a > b                                │
│ ✓ │ append output               │ a >> b                               │
│ ✓ │ redirect input              │ a < b                                │
│   │ redirect to file descriptor │ a 2>&1                               │
│ ~ │ conditionals                │ a || b && c                          │
│ ✓ │ commands                    │ a; b;                                │
│   │ grouping                    │ a; {b || c}                          │
│   │ subshells                   │ (a)                                  │
│ ✓ │ pipes*                      │ a | b                                │
│   │ command substitution        │ $(a \(aqb\(aq c)                           │
│   │ process substitution        │ <(a | b)                             │
│   │ local variables             │ a = 2                                │
│ ✓ │ variable interpolation      │ echo $HOME                           │
│ ✓ │ environment variables       │ a=b a b                              │
│   │ aliases                     │ alias g \(aqgit\(aq                        │
│ ✓ │ functions                   │ repl; def foo;puts :bar;end; ^D foo  │
└───┴─────────────────────────────┴──────────────────────────────────────┘
┌───┬─────────────────────────────┐┌───┬─────────────────────────────┐
│ ✓ │ feature fully supported     ││   │ feature pending             │
│ ~ │ feature sorta supported     ││ x │ won\(aqt support               │
└───┴─────────────────────────────┘└───┴─────────────────────────────┘
.fi
.if n .RE
.sp
\fBNOTE\fP: redirection and pipes won\(cqt work in the executable version of msh
until MRuby supports \f(CRIO#reopen\fP.
.sp
\fBNOTE\fP: this is an intentionally small subset of \f(CRsh\fP, for now.
.sp
It allows for interpolation in words
.sp
.if n .RS 4
.nf
$ echo π ≈ #{Math::PI} | cowsay
 _________________________
< π ≈ 3.141592653589793 . >
 \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
        \(rs   ^__^
         \(rs  (oo)\(rs_______
            (__)\(rs       )\(rs/\(rs
                ||\-\-\-\-w |
                ||     ||
.fi
.if n .RE
.sp
The underlying REPL is available via the \f(CRrepl\fP builtin. It\(cqs the same
context as used during interpolation.
.sp
.if n .RS 4
.nf
$ repl
enter some ruby (sorry, no multiline)
> def foo; "bar"; end
=> :foo
> ^D
$ echo foo#{foo}
foo bar
$ echo #{self}
<Msh::Context:0x0000557a7f0b6f68>
.fi
.if n .RE
.sp
Functions are just method calls on that same REPL context.
.SH "EXAMPLES"
.sp
Filter commands
.sp
.if n .RS 4
.nf
$ repl
enter some ruby (sorry, no multiline)
> def upcase; ARGF.each_line { |l| puts l.upcase }; end
=> :upcase
> ^D
$ echo hi | upcase
HI
.fi
.if n .RE
.sp
Changing the prompt
.sp
.if n .RS 4
.nf
$ repl
enter some ruby (sorry, no multiline)
> def prompt; "% "; end
=> "% "
> ^D
%
.fi
.if n .RE
.SH "BUILTINS"
.sp
Msh\(cqs usage of the term \fIbuiltin\fP is a bit loose here \- \fIbuiltins\fP can fork
and exec if they want.
.sp
Plus, since functions are just method calls to a single object, there\(cqs a
number of \fIbuiltins\fP already available, such as \f(CRputs\fP, \f(CRprint\fP,
\f(CRrespond_to?\fP, etc.
.sp
.if n .RS 4
.nf
┌───────────────────┬─────────────────────────────────────────────────┐
│ parser [files]... │ Run Msh\(aqs parser on input files, or from stdin  │
│ lexer  [files]... │ Run Msh\(aqs lexer on input files, or from stdin   │
│ help  [topics]... │ Equivalent to `man msh\-topic ...` or `man msh`  │
│ cd                │ Change directory, respects `\-`, `PWD/OLDPWD`    │
└───────────────────┴─────────────────────────────────────────────────┘
.fi
.if n .RE
.SS "TODO"
.sp
\fBNote\fP: not a comprehensive list, by any means.
.sp
.if n .RS 4
.nf
┌───┬───────────────────────────────────────────────────────────────────┐
│   │`source file.msh`                                                  │
│ ~ │ config files                                                      │
│   │ interrupt handling                                                │
│   │ control flow such as `if/else/while/loop`                         │
│   │ tab\-completion                                                    │
│   │ pretty colors                                                     │
└───┴───────────────────────────────────────────────────────────────────┘
.fi
.if n .RE
.SH "OPTIONS"
.sp
\fB\-h, \-\-help\fP
.RS 4
Show usage information.
.RE
.sp
\fB\-V, \-\-version\fP
.RS 4
Show the version.
.RE
.sp
\fB\-c <command>\fP
.RS 4
Run a command string as input.
.RE
.SH "COPYING"
.sp
Copyright (C) 2020 Mark Delk.
Free use of this software is granted under the terms of the MIT License.
.SH "RESOURCES"
.sp
\fBissue tracker\fP
.RS 4
.URL "https://github.com/jethrodaniel/msh/issues?q=is%3Aopen" "" "."
.RE
.sp
\fBsource code\fP
.RS 4
.URL "https://github.com/jethrodaniel/msh" "" ""
.RE
.sp
\fBreleases\fP
.RS 4
.URL "https://github.com/jethrodaniel/msh/releases" "" ""
.RE
.SH "SHAMELESS PLUG"
.sp
Donations are appreciated. Stay safe y\(cqall.
.SH "MSH"
.sp
Part of msh(1).